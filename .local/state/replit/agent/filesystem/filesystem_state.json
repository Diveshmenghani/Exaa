{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# HICA Staking Protocol\n\n## Overview\n\nHICA is a comprehensive DeFi staking platform that allows users to stake tokens for rewards over various lock periods (1, 2, or 3 years) with an integrated multi-level referral system. The platform features token swapping capabilities between USDT and HICA tokens at a 1:1 rate, staking with APY rewards that increase based on lock duration, and a 25-level referral commission structure. Built with a modern full-stack architecture using React/TypeScript on the frontend and Express.js with PostgreSQL on the backend.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for fast development and building\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with a dark theme and vibrant color palette featuring hyper colors and gradients\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework using ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations with PostgreSQL\n- **API Design**: RESTful API structure with dedicated route handlers for users, stakes, referrals, and token swaps\n- **Development**: TSX for TypeScript execution in development mode\n- **Data Storage**: Hybrid approach with in-memory storage class for development and PostgreSQL for production\n\n### Database Schema\n- **Users Table**: Wallet addresses, referral codes, staking totals, earnings tracking\n- **Stakes Table**: Individual stake records with amounts, lock periods, APY rates, and status tracking\n- **Referrals Table**: Multi-level referral relationships with commission rates and earnings\n- **Token Swaps Table**: Buy/sell transaction history between USDT and HICA tokens\n- **Contract Settings Table**: Global platform configuration and emergency controls\n\n### Authentication & Security\n- **Wallet-Based Authentication**: Users authenticate using cryptocurrency wallet addresses (MetaMask integration planned)\n- **No Traditional Authentication**: No passwords or traditional login systems - purely wallet-based identification\n- **Mock Wallet**: Development environment uses mock wallet address generation for testing\n\n### Business Logic Features\n- **Staking Rewards**: Monthly APY rates of 10%, 12%, and 15% for 1, 2, and 3-year lock periods respectively\n- **Referral System**: 25-level deep commission structure with rates from 12% (level 1) down to 0.25% (levels 21-25)\n- **Token Economics**: 1:1 USDT to HICA token swap ratio with approval mechanisms\n- **Emergency Features**: Contract pause functionality and emergency unstaking capabilities\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless database connection\n- **drizzle-orm & drizzle-kit**: Type-safe ORM and migration tools for PostgreSQL\n- **@tanstack/react-query**: Server state management and data fetching\n- **wouter**: Lightweight React router\n\n### UI and Styling Dependencies\n- **@radix-ui/react-***: Comprehensive set of accessible UI primitives (dialogs, dropdowns, forms, etc.)\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Development and Build Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Type safety across the entire application\n- **esbuild**: Fast JavaScript bundler for production builds\n- **tsx**: TypeScript execution for development\n\n### Validation and Forms\n- **zod**: Schema validation library\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation resolvers\n\n### Additional Features\n- **date-fns**: Date manipulation and formatting\n- **embla-carousel-react**: Carousel/slider components\n- **cmdk**: Command palette interface\n- **nanoid**: Unique ID generation","size_bytes":4179},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        gradient: 'gradient 6s ease infinite',\n        float: 'float 6s ease-in-out infinite',\n        glow: 'glow 2s ease-in-out infinite alternate',\n        particle: 'particle 20s linear infinite',\n        glitch: 'glitch 2s infinite',\n        \"rotate3d\": 'rotate3d 10s linear infinite',\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3057},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, () => {\n    log(`serving on http://localhost:${port}`);\n  });\n})();\n\n","size_bytes":2026},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertStakeSchema, insertTokenSwapSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst REFERRAL_COMMISSION_RATES = [\n  { level: 1, rate: 12 },\n  { level: 2, rate: 8 },\n  { level: 3, rate: 6 },\n  { level: 4, rate: 4 },\n  { level: 5, rate: 2 },\n  { level: 6, rate: 1 },\n  { level: 7, rate: 1 },\n  { level: 8, rate: 1 },\n  { level: 9, rate: 1 },\n  { level: 10, rate: 1 },\n  { level: 11, rate: 0.75 },\n  { level: 12, rate: 0.75 },\n  { level: 13, rate: 0.75 },\n  { level: 14, rate: 0.75 },\n  { level: 15, rate: 0.75 },\n  { level: 16, rate: 0.5 },\n  { level: 17, rate: 0.5 },\n  { level: 18, rate: 0.5 },\n  { level: 19, rate: 0.5 },\n  { level: 20, rate: 0.5 },\n  { level: 21, rate: 0.25 },\n  { level: 22, rate: 0.25 },\n  { level: 23, rate: 0.25 },\n  { level: 24, rate: 0.25 },\n  { level: 25, rate: 0.25 },\n];\n\nconst APY_RATES = {\n  12: 10, // 1 year = 10% monthly\n  24: 12, // 2 years = 12% monthly  \n  36: 15, // 3 years = 15% monthly\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // User routes\n  app.post(\"/api/users/register\", async (req, res) => {\n    try {\n      const registerSchema = insertUserSchema.extend({\n        walletAddress: z.string().min(1),\n        referralCode: z.string().optional(),\n        referrerCode: z.string().optional(),\n      });\n      \n      const data = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByWallet(data.walletAddress);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already registered\" });\n      }\n      \n      let referrerId = undefined;\n      if (data.referrerCode) {\n        const referrer = await storage.getUserByReferralCode(data.referrerCode);\n        if (referrer) {\n          referrerId = referrer.id;\n        }\n      }\n      \n      const user = await storage.createUser({\n        walletAddress: data.walletAddress,\n        referralCode: data.referralCode,\n        referrerId,\n        totalStaked: \"0\",\n        totalEarned: \"0\",\n        referralEarnings: \"0\",\n        totalReferrals: 0,\n        isRegistered: true,\n      });\n      \n      // Create referral chain if user has referrer\n      if (referrerId) {\n        await createReferralChain(user.id, referrerId);\n      }\n      \n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n  \n  app.get(\"/api/users/:walletAddress\", async (req, res) => {\n    try {\n      const user = await storage.getUserByWallet(req.params.walletAddress);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Staking routes\n  app.post(\"/api/stakes\", async (req, res) => {\n    try {\n      const stakeSchema = insertStakeSchema.extend({\n        userId: z.string(), // This will be walletAddress\n        amount: z.string(),\n        lockPeriodMonths: z.number().int().min(12).max(36),\n      });\n      \n      const data = stakeSchema.parse(req.body);\n      \n      // Resolve walletAddress to internal user ID\n      const user = await storage.getUserByWallet(data.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found. Please register first.\" });\n      }\n      \n      // Validate lock period is valid\n      if (![12, 24, 36].includes(data.lockPeriodMonths)) {\n        return res.status(400).json({ message: \"Invalid lock period\" });\n      }\n      \n      const apyRate = APY_RATES[data.lockPeriodMonths as keyof typeof APY_RATES];\n      \n      const stake = await storage.createStake({\n        userId: user.id, // Use internal user ID\n        amount: data.amount,\n        lockPeriodMonths: data.lockPeriodMonths,\n        apyRate: apyRate.toString(),\n      });\n      \n      // Update user's total staked\n      const newTotalStaked = (parseFloat(user.totalStaked || \"0\") + parseFloat(data.amount)).toString();\n      await storage.updateUser(user.id, { totalStaked: newTotalStaked });\n      \n      res.json(stake);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n  \n  app.get(\"/api/stakes/user/:walletAddress\", async (req, res) => {\n    try {\n      // Resolve walletAddress to internal user ID\n      const user = await storage.getUserByWallet(req.params.walletAddress);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const stakes = await storage.getStakesByUserId(user.id);\n      \n      // Check which stakes can be unstaked (past end date)\n      const now = new Date();\n      const updatedStakes = await Promise.all(stakes.map(async (stake) => {\n        if (!stake.canUnstake && stake.endDate <= now) {\n          return await storage.updateStake(stake.id, { canUnstake: true }) || stake;\n        }\n        return stake;\n      }));\n      \n      res.json(updatedStakes);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  app.post(\"/api/stakes/:id/unstake\", async (req, res) => {\n    try {\n      const stake = await storage.getStake(req.params.id);\n      if (!stake) {\n        return res.status(404).json({ message: \"Stake not found\" });\n      }\n      \n      if (!stake.canUnstake) {\n        return res.status(400).json({ message: \"Stake cannot be unstaked yet\" });\n      }\n      \n      if (!stake.isActive) {\n        return res.status(400).json({ message: \"Stake is already inactive\" });\n      }\n      \n      // Calculate final rewards\n      const monthsStaked = Math.floor((new Date().getTime() - (stake.startDate?.getTime() || 0)) / (1000 * 60 * 60 * 24 * 30));\n      const monthlyReward = (parseFloat(stake.amount) * parseFloat(stake.apyRate)) / 100;\n      const totalRewards = monthlyReward * monthsStaked;\n      \n      const updatedStake = await storage.updateStake(req.params.id, {\n        isActive: false,\n        earnedAmount: totalRewards.toString(),\n      });\n      \n      // Update user's total earned\n      const user = await storage.getUser(stake.userId);\n      if (user) {\n        const newTotalEarned = (parseFloat(user.totalEarned || \"0\") + totalRewards).toString();\n        await storage.updateUser(stake.userId, { totalEarned: newTotalEarned });\n      }\n      \n      res.json(updatedStake);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  app.post(\"/api/stakes/:id/emergency-unstake\", async (req, res) => {\n    try {\n      const contractSettings = await storage.getContractSettings();\n      if (!contractSettings.isPaused || !contractSettings.emergencyUnstakeEnabled) {\n        return res.status(400).json({ message: \"Emergency unstake not available\" });\n      }\n      \n      const stake = await storage.getStake(req.params.id);\n      if (!stake || !stake.isActive) {\n        return res.status(400).json({ message: \"Invalid stake\" });\n      }\n      \n      const updatedStake = await storage.updateStake(req.params.id, {\n        isActive: false,\n        earnedAmount: \"0\", // No rewards in emergency unstake\n      });\n      \n      res.json(updatedStake);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Token swap routes\n  app.post(\"/api/swaps/buy\", async (req, res) => {\n    try {\n      const swapSchema = insertTokenSwapSchema.extend({\n        userId: z.string(), // This will be walletAddress\n        amount: z.string(),\n      });\n      \n      const data = swapSchema.parse(req.body);\n      \n      // Resolve walletAddress to internal user ID\n      const user = await storage.getUserByWallet(data.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found. Please register first.\" });\n      }\n      \n      const swap = await storage.createSwap({\n        userId: user.id, // Use internal user ID\n        fromToken: \"USDT\",\n        toToken: \"HICA\",\n        amount: data.amount,\n        swapType: \"buy\",\n      });\n      \n      res.json(swap);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n  \n  app.post(\"/api/swaps/sell\", async (req, res) => {\n    try {\n      const swapSchema = insertTokenSwapSchema.extend({\n        userId: z.string(), // This will be walletAddress\n        amount: z.string(),\n      });\n      \n      const data = swapSchema.parse(req.body);\n      \n      // Resolve walletAddress to internal user ID\n      const user = await storage.getUserByWallet(data.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found. Please register first.\" });\n      }\n      \n      const swap = await storage.createSwap({\n        userId: user.id, // Use internal user ID\n        fromToken: \"HICA\",\n        toToken: \"USDT\", \n        amount: data.amount,\n        swapType: \"sell\",\n      });\n      \n      res.json(swap);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n  \n  // Referral routes\n  app.get(\"/api/referrals/:userId\", async (req, res) => {\n    try {\n      // userId here is actually the internal user ID, so no need to resolve\n      const referrals = await storage.getReferralsByReferrerId(req.params.userId);\n      res.json(referrals);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  app.post(\"/api/referrals/claim\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      // userId here is the internal user ID, so use it directly\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      const claimableAmount = user.referralEarnings || \"0\";\n      if (parseFloat(claimableAmount) <= 0) {\n        return res.status(400).json({ message: \"No rewards to claim\" });\n      }\n      \n      // Reset referral earnings and add to total earned\n      const newTotalEarned = (parseFloat(user.totalEarned || \"0\") + parseFloat(claimableAmount)).toString();\n      await storage.updateUser(userId, {\n        referralEarnings: \"0\",\n        totalEarned: newTotalEarned,\n      });\n      \n      res.json({ claimed: claimableAmount, newTotal: newTotalEarned });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Contract settings routes\n  app.get(\"/api/contract/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getContractSettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.patch(\"/api/contract/settings\", async (req, res) => {\n    try {\n      const updateSchema = z.object({\n        isPaused: z.boolean().optional(),\n        emergencyUnstakeEnabled: z.boolean().optional(),\n      });\n      \n      const updates = updateSchema.parse(req.body);\n      const settings = await storage.updateContractSettings(updates);\n      res.json(settings);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n  \n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nasync function createReferralChain(userId: string, referrerId: string, currentLevel: number = 1) {\n  if (currentLevel > 25) return;\n  \n  const commissionData = REFERRAL_COMMISSION_RATES.find(c => c.level === currentLevel);\n  if (!commissionData) return;\n  \n  // Create referral relationship\n  await storage.createReferral({\n    referrerId,\n    referredId: userId,\n    level: currentLevel,\n    commissionRate: commissionData.rate.toString(),\n  });\n  \n  // Update referrer's total referrals\n  const referrer = await storage.getUser(referrerId);\n  if (referrer) {\n    await storage.updateUser(referrerId, {\n      totalReferrals: (referrer.totalReferrals || 0) + 1,\n    });\n    \n    // Continue chain to next level\n    if (referrer.referrerId) {\n      await createReferralChain(userId, referrer.referrerId, currentLevel + 1);\n    }\n  }\n}\n","size_bytes":12308},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Stake, \n  type InsertStake,\n  type Referral,\n  type InsertReferral,\n  type TokenSwap,\n  type InsertTokenSwap,\n  type ContractSettings\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByWallet(walletAddress: string): Promise<User | undefined>;\n  getUserByReferralCode(referralCode: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Stake operations\n  getStakesByUserId(userId: string): Promise<Stake[]>;\n  getStake(id: string): Promise<Stake | undefined>;\n  createStake(stake: InsertStake): Promise<Stake>;\n  updateStake(id: string, updates: Partial<Stake>): Promise<Stake | undefined>;\n  \n  // Referral operations\n  getReferralsByReferrerId(referrerId: string): Promise<Referral[]>;\n  getReferralsByReferredId(referredId: string): Promise<Referral[]>;\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  updateReferral(id: string, updates: Partial<Referral>): Promise<Referral | undefined>;\n  \n  // Token swap operations\n  getSwapsByUserId(userId: string): Promise<TokenSwap[]>;\n  createSwap(swap: InsertTokenSwap): Promise<TokenSwap>;\n  \n  // Contract settings\n  getContractSettings(): Promise<ContractSettings>;\n  updateContractSettings(updates: Partial<ContractSettings>): Promise<ContractSettings>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private stakes: Map<string, Stake> = new Map();\n  private referrals: Map<string, Referral> = new Map();\n  private tokenSwaps: Map<string, TokenSwap> = new Map();\n  private contractSettings: ContractSettings;\n\n  constructor() {\n    // Initialize with default contract settings\n    this.contractSettings = {\n      id: randomUUID(),\n      isPaused: false,\n      emergencyUnstakeEnabled: false,\n      lastUpdated: new Date(),\n    };\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByWallet(walletAddress: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.walletAddress === walletAddress,\n    );\n  }\n\n  async getUserByReferralCode(referralCode: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.referralCode === referralCode,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      id,\n      walletAddress: insertUser.walletAddress,\n      referralCode: insertUser.referralCode || `REF${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n      referrerId: insertUser.referrerId || null,\n      totalStaked: insertUser.totalStaked || \"0\",\n      totalEarned: insertUser.totalEarned || \"0\",\n      referralEarnings: insertUser.referralEarnings || \"0\",\n      totalReferrals: insertUser.totalReferrals || 0,\n      isRegistered: insertUser.isRegistered || false,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Stake operations\n  async getStakesByUserId(userId: string): Promise<Stake[]> {\n    return Array.from(this.stakes.values()).filter(\n      (stake) => stake.userId === userId,\n    );\n  }\n\n  async getStake(id: string): Promise<Stake | undefined> {\n    return this.stakes.get(id);\n  }\n\n  async createStake(insertStake: InsertStake): Promise<Stake> {\n    const id = randomUUID();\n    const now = new Date();\n    const endDate = new Date(now);\n    endDate.setMonth(endDate.getMonth() + insertStake.lockPeriodMonths);\n    \n    const stake: Stake = {\n      ...insertStake,\n      id,\n      startDate: now,\n      endDate,\n      earnedAmount: \"0\",\n      isActive: true,\n      canUnstake: false,\n    };\n    this.stakes.set(id, stake);\n    return stake;\n  }\n\n  async updateStake(id: string, updates: Partial<Stake>): Promise<Stake | undefined> {\n    const stake = this.stakes.get(id);\n    if (!stake) return undefined;\n    \n    const updatedStake = { ...stake, ...updates };\n    this.stakes.set(id, updatedStake);\n    return updatedStake;\n  }\n\n  // Referral operations\n  async getReferralsByReferrerId(referrerId: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values()).filter(\n      (referral) => referral.referrerId === referrerId,\n    );\n  }\n\n  async getReferralsByReferredId(referredId: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values()).filter(\n      (referral) => referral.referredId === referredId,\n    );\n  }\n\n  async createReferral(insertReferral: InsertReferral): Promise<Referral> {\n    const id = randomUUID();\n    const referral: Referral = {\n      ...insertReferral,\n      id,\n      createdAt: new Date(),\n      totalEarned: \"0\",\n    };\n    this.referrals.set(id, referral);\n    return referral;\n  }\n\n  async updateReferral(id: string, updates: Partial<Referral>): Promise<Referral | undefined> {\n    const referral = this.referrals.get(id);\n    if (!referral) return undefined;\n    \n    const updatedReferral = { ...referral, ...updates };\n    this.referrals.set(id, updatedReferral);\n    return updatedReferral;\n  }\n\n  // Token swap operations\n  async getSwapsByUserId(userId: string): Promise<TokenSwap[]> {\n    return Array.from(this.tokenSwaps.values()).filter(\n      (swap) => swap.userId === userId,\n    );\n  }\n\n  async createSwap(insertSwap: InsertTokenSwap): Promise<TokenSwap> {\n    const id = randomUUID();\n    const swap: TokenSwap = {\n      ...insertSwap,\n      id,\n      createdAt: new Date(),\n    };\n    this.tokenSwaps.set(id, swap);\n    return swap;\n  }\n\n  // Contract settings\n  async getContractSettings(): Promise<ContractSettings> {\n    return this.contractSettings;\n  }\n\n  async updateContractSettings(updates: Partial<ContractSettings>): Promise<ContractSettings> {\n    this.contractSettings = {\n      ...this.contractSettings,\n      ...updates,\n      lastUpdated: new Date(),\n    };\n    return this.contractSettings;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6446},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  referralCode: text(\"referral_code\").unique(),\n  referrerId: varchar(\"referrer_id\"),\n  totalStaked: decimal(\"total_staked\", { precision: 18, scale: 8 }).default(\"0\"),\n  totalEarned: decimal(\"total_earned\", { precision: 18, scale: 8 }).default(\"0\"),\n  referralEarnings: decimal(\"referral_earnings\", { precision: 18, scale: 8 }).default(\"0\"),\n  totalReferrals: integer(\"total_referrals\").default(0),\n  isRegistered: boolean(\"is_registered\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const stakes = pgTable(\"stakes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  lockPeriodMonths: integer(\"lock_period_months\").notNull(),\n  apyRate: decimal(\"apy_rate\", { precision: 5, scale: 2 }).notNull(),\n  earnedAmount: decimal(\"earned_amount\", { precision: 18, scale: 8 }).default(\"0\"),\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  canUnstake: boolean(\"can_unstake\").default(false),\n});\n\nexport const referrals = pgTable(\"referrals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  referrerId: varchar(\"referrer_id\").notNull().references(() => users.id),\n  referredId: varchar(\"referred_id\").notNull().references(() => users.id),\n  level: integer(\"level\").notNull(),\n  commissionRate: decimal(\"commission_rate\", { precision: 5, scale: 2 }).notNull(),\n  totalEarned: decimal(\"total_earned\", { precision: 18, scale: 8 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tokenSwaps = pgTable(\"token_swaps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  fromToken: text(\"from_token\").notNull(),\n  toToken: text(\"to_token\").notNull(),\n  amount: decimal(\"amount\", { precision: 18, scale: 8 }).notNull(),\n  swapType: text(\"swap_type\").notNull(), // 'buy' or 'sell'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contractSettings = pgTable(\"contract_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  isPaused: boolean(\"is_paused\").default(false),\n  emergencyUnstakeEnabled: boolean(\"emergency_unstake_enabled\").default(false),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStakeSchema = createInsertSchema(stakes).omit({\n  id: true,\n  startDate: true,\n  endDate: true,\n  earnedAmount: true,\n  isActive: true,\n  canUnstake: true,\n});\n\nexport const insertReferralSchema = createInsertSchema(referrals).omit({\n  id: true,\n  createdAt: true,\n  totalEarned: true,\n});\n\nexport const insertTokenSwapSchema = createInsertSchema(tokenSwaps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Stake = typeof stakes.$inferSelect;\nexport type InsertStake = z.infer<typeof insertStakeSchema>;\nexport type Referral = typeof referrals.$inferSelect;\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type TokenSwap = typeof tokenSwaps.$inferSelect;\nexport type InsertTokenSwap = z.infer<typeof insertTokenSwapSchema>;\nexport type ContractSettings = typeof contractSettings.$inferSelect;\n","size_bytes":3890},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { WalletProvider } from \"@/hooks/use-wallet\";\nimport { ContractProvider } from \"@/hooks/use-contract\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Swap from \"@/pages/swap\";\nimport Stake from \"@/pages/stake\";\nimport Unstake from \"@/pages/unstake\";\nimport Profile from \"@/pages/profile\";\nimport Navbar from \"@/components/navbar\";\nimport CustomCursor from \"@/components/custom-cursor\";\nimport ParticleBackground from \"@/components/particle-background\";\nimport ScrollIndicator from \"@/components/scroll-indicator\";\n\nfunction Router() {\n  return (\n    <>\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/swap\" component={Swap} />\n        <Route path=\"/stake\" component={Stake} />\n        <Route path=\"/unstake\" component={Unstake} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <WalletProvider>\n        <ContractProvider>\n          <TooltipProvider>\n            <CustomCursor />\n            <ParticleBackground />\n            <ScrollIndicator />\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ContractProvider>\n      </WalletProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1640},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 15%, 5%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(220, 15%, 8%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(220, 15%, 8%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(200, 100%, 55%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(270, 100%, 75%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(220, 10%, 18%);\n  --muted-foreground: hsl(220, 8%, 70%);\n  --accent: hsl(320, 100%, 65%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 75%, 55%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 10%, 20%);\n  --input: hsl(220, 10%, 18%);\n  --ring: hsl(200, 100%, 55%);\n  --chart-1: hsl(200, 100%, 55%);\n  --chart-2: hsl(270, 100%, 75%);\n  --chart-3: hsl(320, 100%, 65%);\n  --chart-4: hsl(140, 100%, 60%);\n  --chart-5: hsl(40, 100%, 65%);\n  --sidebar: hsl(220, 15%, 5%);\n  --sidebar-foreground: hsl(0, 0%, 98%);\n  --sidebar-primary: hsl(200, 100%, 55%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(220, 10%, 18%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(220, 10%, 20%);\n  --sidebar-ring: hsl(200, 100%, 55%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(210, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(280, 100%, 70%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(310, 100%, 60%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(210, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, #0D1117 0%, #1A1B3A 30%, #2D1B69 60%, #3B2F7F 100%);\n    cursor: none;\n    overflow-x: hidden;\n  }\n}\n\n@layer utilities {\n  .glass-card {\n    background: rgba(255, 255, 255, 0.08);\n    backdrop-filter: blur(15px);\n    border: 1px solid rgba(255, 255, 255, 0.15);\n    box-shadow: 0 4px 20px rgba(0, 150, 255, 0.1);\n  }\n\n  .neon-button {\n    background: linear-gradient(45deg, hsl(200, 100%, 55%), hsl(270, 100%, 75%), hsl(320, 100%, 65%));\n    background-size: 300% 300%;\n    animation: gradient 2.5s ease infinite;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(0, 150, 255, 0.3);\n  }\n\n  .neon-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 35px rgba(0, 150, 255, 0.6), 0 0 20px rgba(139, 92, 246, 0.4);\n    background-size: 200% 200%;\n  }\n\n  .custom-cursor {\n    position: fixed;\n    width: 20px;\n    height: 20px;\n    background: linear-gradient(45deg, hsl(210, 100%, 50%), hsl(280, 100%, 70%));\n    border-radius: 50%;\n    pointer-events: none;\n    z-index: 10000;\n    transition: transform 0.1s ease;\n    box-shadow: 0 0 20px rgba(0, 212, 255, 0.6);\n  }\n\n  .custom-cursor-trail {\n    position: fixed;\n    width: 8px;\n    height: 8px;\n    background: rgba(139, 92, 246, 0.6);\n    border-radius: 50%;\n    pointer-events: none;\n    z-index: 9999;\n  }\n\n  .particle {\n    position: absolute;\n    width: 4px;\n    height: 4px;\n    background: linear-gradient(45deg, hsl(210, 100%, 50%), hsl(310, 100%, 70%));\n    border-radius: 50%;\n    animation: particle linear infinite;\n  }\n\n  .glitch-text {\n    animation: glitch 2s infinite;\n  }\n\n  .cube-3d {\n    transform-style: preserve-3d;\n    animation: rotate3d 10s linear infinite;\n  }\n\n  .parallax-bg {\n    background-attachment: fixed;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n\n  .slider-smooth .slider-track {\n    transition: all 0.2s ease-out;\n  }\n\n  .slider-smooth .slider-thumb {\n    transition: all 0.15s ease-out;\n    box-shadow: 0 2px 10px rgba(0, 150, 255, 0.3);\n  }\n\n  .slider-smooth .slider-thumb:hover {\n    transform: scale(1.1);\n    box-shadow: 0 4px 20px rgba(0, 150, 255, 0.5);\n  }\n}\n\n@keyframes gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n@keyframes glitch {\n  0%, 100% { transform: translate(0); }\n  20% { transform: translate(-2px, 2px); }\n  40% { transform: translate(-2px, -2px); }\n  60% { transform: translate(2px, 2px); }\n  80% { transform: translate(2px, -2px); }\n}\n\n@keyframes particle {\n  0% { transform: translateY(100vh) rotate(0deg); opacity: 0; }\n  10% { opacity: 1; }\n  90% { opacity: 1; }\n  100% { transform: translateY(-100vh) rotate(360deg); opacity: 0; }\n}\n\n@keyframes rotate3d {\n  0% { transform: rotateX(0deg) rotateY(0deg); }\n  100% { transform: rotateX(360deg) rotateY(360deg); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes glow {\n  from { box-shadow: 0 0 20px rgba(0, 212, 255, 0.5); }\n  to { box-shadow: 0 0 30px rgba(139, 92, 246, 0.8); }\n}\n","size_bytes":5459},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/custom-cursor.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nexport default function CustomCursor() {\n  const cursorRef = useRef<HTMLDivElement>(null);\n  const trailRefs = useRef<HTMLDivElement[]>([]);\n\n  useEffect(() => {\n    // Create cursor trails\n    const trails: HTMLDivElement[] = [];\n    for (let i = 0; i < 5; i++) {\n      const trail = document.createElement('div');\n      trail.className = 'custom-cursor-trail';\n      document.body.appendChild(trail);\n      trails.push(trail);\n    }\n    trailRefs.current = trails;\n\n    let mouseX = 0, mouseY = 0;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      mouseX = e.clientX;\n      mouseY = e.clientY;\n\n      if (cursorRef.current) {\n        cursorRef.current.style.transform = `translate(${mouseX - 10}px, ${mouseY - 10}px)`;\n      }\n\n      // Animate trails\n      trails.forEach((trail, index) => {\n        setTimeout(() => {\n          trail.style.transform = `translate(${mouseX - 4}px, ${mouseY - 4}px)`;\n        }, index * 50);\n      });\n    };\n\n    const handleMouseEnterButton = () => {\n      if (cursorRef.current) {\n        cursorRef.current.style.transform += ' scale(1.5)';\n      }\n    };\n\n    const handleMouseLeaveButton = () => {\n      if (cursorRef.current) {\n        cursorRef.current.style.transform = cursorRef.current.style.transform.replace(' scale(1.5)', '');\n      }\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n\n    // Add hover effects to interactive elements\n    const interactiveElements = document.querySelectorAll('button, a, [data-testid*=\"button-\"], [data-testid*=\"link-\"]');\n    interactiveElements.forEach(element => {\n      element.addEventListener('mouseenter', handleMouseEnterButton);\n      element.addEventListener('mouseleave', handleMouseLeaveButton);\n    });\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      trails.forEach(trail => document.body.removeChild(trail));\n      interactiveElements.forEach(element => {\n        element.removeEventListener('mouseenter', handleMouseEnterButton);\n        element.removeEventListener('mouseleave', handleMouseLeaveButton);\n      });\n    };\n  }, []);\n\n  return <div ref={cursorRef} className=\"custom-cursor\" />;\n}\n","size_bytes":2205},"client/src/components/navbar.tsx":{"content":"import { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { useWallet } from '@/hooks/use-wallet';\n\nexport default function Navbar() {\n  const { isConnected, walletAddress, connect, disconnect } = useWallet();\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-card\">\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            <div className=\"flex items-center space-x-2 cursor-pointer\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-lg\"></div>\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                HICA\n              </span>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"/\" data-testid=\"link-nav-home\">\n              <span className=\"text-foreground hover:text-primary transition-colors cursor-pointer\">Home</span>\n            </Link>\n            <Link href=\"/stake\" data-testid=\"link-nav-stake\">\n              <span className=\"text-foreground hover:text-primary transition-colors cursor-pointer\">Stake</span>\n            </Link>\n            <Link href=\"/swap\" data-testid=\"link-nav-swap\">\n              <span className=\"text-foreground hover:text-primary transition-colors cursor-pointer\">Swap</span>\n            </Link>\n            <Link href=\"/profile\" data-testid=\"link-nav-profile\">\n              <span className=\"text-foreground hover:text-primary transition-colors cursor-pointer\">Profile</span>\n            </Link>\n          </div>\n          \n          {isConnected ? (\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-wallet-address\">\n                {walletAddress?.substring(0, 6)}...{walletAddress?.substring(walletAddress.length - 4)}\n              </span>\n              <Button \n                onClick={disconnect}\n                variant=\"outline\"\n                data-testid=\"button-disconnect-wallet\"\n              >\n                Disconnect\n              </Button>\n            </div>\n          ) : (\n            <Button \n              onClick={connect}\n              className=\"neon-button px-6 py-2 rounded-lg text-white font-semibold\"\n              data-testid=\"button-connect-wallet\"\n            >\n              Connect Wallet\n            </Button>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2599},"client/src/components/particle-background.tsx":{"content":"export default function ParticleBackground() {\n  return (\n    <div className=\"fixed inset-0 overflow-hidden pointer-events-none\">\n      {Array.from({ length: 9 }, (_, i) => (\n        <div\n          key={i}\n          className=\"particle\"\n          style={{\n            left: `${(i + 1) * 10}%`,\n            animationDuration: `${15 + (i % 3) * 3}s`,\n            animationDelay: `${i * 2}s`,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":442},"client/src/components/referral-network.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { REFERRAL_COMMISSION_RATES } from '@/lib/constants';\n\ninterface ReferralNetworkProps {\n  referrals: any[];\n  totalReferrals: number;\n  referralEarnings: string;\n  referralLink: string;\n  onClaim: () => void;\n  isClaiming: boolean;\n}\n\nexport default function ReferralNetwork({ \n  referrals, \n  totalReferrals, \n  referralEarnings, \n  referralLink, \n  onClaim, \n  isClaiming \n}: ReferralNetworkProps) {\n  \n  const copyReferralLink = () => {\n    navigator.clipboard.writeText(referralLink);\n  };\n\n  const getReferralsByLevel = (level: number) => {\n    return referrals.filter(r => r.level === level).length;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Referral Network</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {/* Network Visualization */}\n          <div className=\"mb-8\">\n            <div className=\"text-center mb-6\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full mx-auto mb-2 flex items-center justify-center\">\n                <i className=\"fas fa-user text-white text-xl\"></i>\n              </div>\n              <span className=\"font-bold\">You</span>\n              <div className=\"text-sm text-muted-foreground\">\n                {totalReferrals} total referrals\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {REFERRAL_COMMISSION_RATES.slice(0, 8).map(rate => {\n                const count = getReferralsByLevel(rate.level);\n                return (\n                  <div key={rate.level} className=\"text-center\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-secondary to-accent rounded-full mx-auto mb-2 flex items-center justify-center\">\n                      <span className=\"text-white text-sm font-bold\">L{rate.level}</span>\n                    </div>\n                    <div className=\"text-sm font-semibold\" data-testid={`text-level-${rate.level}-count`}>\n                      {count} users\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {rate.rate}%\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Referral Link */}\n          <div className=\"p-4 bg-muted/10 rounded-xl\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"text-sm text-muted-foreground mb-1\">Your Referral Link</div>\n                <div className=\"font-mono text-sm break-all\" data-testid=\"text-referral-link\">\n                  {referralLink}\n                </div>\n              </div>\n              <Button\n                onClick={copyReferralLink}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"ml-4 neon-button\"\n                data-testid=\"button-copy-referral\"\n              >\n                <i className=\"fas fa-copy\"></i>\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Referral Earnings */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl font-bold\">Referral Earnings</CardTitle>\n            <Button\n              onClick={onClaim}\n              disabled={isClaiming || parseFloat(referralEarnings) <= 0}\n              className=\"neon-button\"\n              data-testid=\"button-claim-referral-rewards\"\n            >\n              {isClaiming ? 'Claiming...' : 'Claim Rewards'}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-primary mb-2\" data-testid=\"text-claimable-rewards\">\n              {parseFloat(referralEarnings).toLocaleString()} HICA\n            </div>\n            <div className=\"text-muted-foreground\">Available to claim</div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Commission Rates */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-bold\">Commission Structure</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n            {REFERRAL_COMMISSION_RATES.slice(0, 10).map(rate => (\n              <div key={rate.level} className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n                <span className=\"text-sm\">Level {rate.level}</span>\n                <span className=\"font-bold text-primary\">{rate.rate}%</span>\n              </div>\n            ))}\n            <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n              <span className=\"text-sm\">Levels 11-25</span>\n              <span className=\"font-bold text-secondary\">0.75-0.25%</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5265},"client/src/components/scroll-indicator.tsx":{"content":"import { useEffect, useState } from 'react';\n\nexport default function ScrollIndicator() {\n  const [scrollProgress, setScrollProgress] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollPercentage = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;\n      setScrollProgress(Math.min(scrollPercentage * 2, 100));\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <div className=\"fixed top-1/2 right-5 transform -translate-y-1/2 z-50\">\n      <div className=\"flex flex-col space-y-2\">\n        <div className=\"w-1 h-32 bg-muted/20 rounded-full overflow-hidden\">\n          <div \n            className=\"w-full bg-gradient-to-b from-primary to-secondary transition-all duration-300 ease-out\"\n            style={{ height: `${scrollProgress}%` }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":963},"client/src/components/staking-calculator.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { APY_RATES, LOCK_PERIODS, REFERRAL_COMMISSION_RATES } from '@/lib/constants';\n\ninterface StakingCalculatorProps {\n  onCalculationChange?: (calculation: {\n    amount: string;\n    lockPeriod: number;\n    referralLevel: number;\n    monthlyRewards: number;\n    totalRewards: number;\n  }) => void;\n}\n\nexport default function StakingCalculator({ onCalculationChange }: StakingCalculatorProps) {\n  const [stakeAmount, setStakeAmount] = useState('1000');\n  const [lockPeriod, setLockPeriod] = useState(12);\n  const [referralLevel, setReferralLevel] = useState(0);\n\n  const [calculation, setCalculation] = useState({\n    baseAPY: 10,\n    referralBonus: 0,\n    monthlyRewards: 100,\n    totalRewards: 2200,\n  });\n\n  useEffect(() => {\n    const amount = parseFloat(stakeAmount) || 0;\n    const baseAPY = APY_RATES[lockPeriod as keyof typeof APY_RATES] || 10;\n    const referralBonus = referralLevel > 0 \n      ? REFERRAL_COMMISSION_RATES.find(r => r.level === referralLevel)?.rate || 0\n      : 0;\n    \n    const totalAPY = baseAPY + (referralBonus * 0.1); // Referral bonus adds to APY\n    const monthlyRewards = (amount * totalAPY) / 100;\n    const totalRewards = amount + (monthlyRewards * lockPeriod);\n\n    const newCalculation = {\n      baseAPY,\n      referralBonus,\n      monthlyRewards,\n      totalRewards,\n    };\n\n    setCalculation(newCalculation);\n    \n    onCalculationChange?.({\n      amount: stakeAmount,\n      lockPeriod,\n      referralLevel,\n      monthlyRewards,\n      totalRewards,\n    });\n  }, [stakeAmount, lockPeriod, referralLevel, onCalculationChange]);\n\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-8\">\n      {/* Calculator Inputs */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Stake Your HICA</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <Label className=\"block text-sm font-medium mb-2\">Stake Amount</Label>\n            <Input\n              type=\"number\"\n              placeholder=\"1000\"\n              value={stakeAmount}\n              onChange={(e) => setStakeAmount(e.target.value)}\n              className=\"w-full p-4 bg-muted/20 rounded-xl border border-border focus:border-primary transition-colors\"\n              data-testid=\"input-stake-amount\"\n            />\n          </div>\n          \n          <div>\n            <Label className=\"block text-sm font-medium mb-2\">Lock Period</Label>\n            <Select value={lockPeriod.toString()} onValueChange={(value) => setLockPeriod(parseInt(value))}>\n              <SelectTrigger className=\"w-full p-4 bg-muted/20 rounded-xl border border-border focus:border-primary transition-colors\" data-testid=\"select-lock-period\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {LOCK_PERIODS.map(period => (\n                  <SelectItem key={period.months} value={period.months.toString()}>\n                    {period.label} ({period.apy}% monthly)\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label className=\"block text-sm font-medium mb-2\">Your Referral Level</Label>\n            <Select value={referralLevel.toString()} onValueChange={(value) => setReferralLevel(parseInt(value))}>\n              <SelectTrigger className=\"w-full p-4 bg-muted/20 rounded-xl border border-border focus:border-primary transition-colors\" data-testid=\"select-referral-level\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"0\">No Referrals (0%)</SelectItem>\n                {REFERRAL_COMMISSION_RATES.slice(0, 5).map(rate => (\n                  <SelectItem key={rate.level} value={rate.level.toString()}>\n                    Level {rate.level} ({rate.rate}%)\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Rewards Preview */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Reward Calculation</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center p-4 bg-muted/10 rounded-xl\">\n              <span>Stake Amount</span>\n              <span className=\"font-bold\" data-testid=\"text-display-stake-amount\">\n                {parseInt(stakeAmount || '0').toLocaleString()} HICA\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-4 bg-muted/10 rounded-xl\">\n              <span>Monthly APY</span>\n              <span className=\"font-bold text-primary\" data-testid=\"text-display-apy\">\n                {calculation.baseAPY}%\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-4 bg-muted/10 rounded-xl\">\n              <span>Referral Bonus</span>\n              <span className=\"font-bold text-secondary\" data-testid=\"text-display-referral-bonus\">\n                {calculation.referralBonus}%\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-4 bg-primary/20 rounded-xl border border-primary/30\">\n              <span>Monthly Rewards</span>\n              <span className=\"font-bold text-primary text-xl\" data-testid=\"text-display-monthly-rewards\">\n                {Math.round(calculation.monthlyRewards).toLocaleString()} HICA\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center p-4 bg-secondary/20 rounded-xl border border-secondary/30\">\n              <span>Total After Lock Period</span>\n              <span className=\"font-bold text-secondary text-xl\" data-testid=\"text-display-total-rewards\">\n                {Math.round(calculation.totalRewards).toLocaleString()} HICA\n              </span>\n            </div>\n          </div>\n\n          {/* APY Chart Placeholder */}\n          <div className=\"p-6 bg-muted/10 rounded-xl\">\n            <h4 className=\"font-semibold mb-4\">Rewards Over Time</h4>\n            <div className=\"h-32 bg-gradient-to-r from-primary/20 to-secondary/20 rounded-lg flex items-end justify-center\">\n              <span className=\"text-muted-foreground text-sm\">Interactive chart visualization</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6873},"client/src/hooks/use-contract.tsx":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\nimport { ethers } from 'ethers';\nimport { useWallet } from './use-wallet';\nimport ExaaStakingABI from '../lib/contracts/ExaaStaking.json';\nimport ExaaSwapABI from '../lib/contracts/ExaaSwap.json';\n\n// Contract addresses for Holesky testnet\nconst EXAA_STAKING_ADDRESS = '0x5BF66975653919bb035A7c9f0b948D5B5B64ef8c'; // Holesky testnet staking contract\nconst EXAA_TOKEN_ADDRESS = '0x083E7858e8539bF642d69CBba008675eABb84298'; // Holesky testnet token address\nconst EXAA_SWAP_ADDRESS = '0x0000000000000000000000000000000000000000'; // Swap functionality will be added later\nconst USDT_TOKEN_ADDRESS = '0x0000000000000000000000000000000000000000'; // USDT on Holesky (to be added later)\n\ninterface ContractContextType {\n  stakingContract: ethers.Contract | null;\n  tokenContract: ethers.Contract | null;\n  swapContract: ethers.Contract | null;\n  usdtContract: ethers.Contract | null;\n  isLoading: boolean;\n  error: string | null;\n  // Staking contract functions\n  stake: (amount: string, lockYears: number, referrer: string) => Promise<boolean>;\n  addReferrer: (referrer: string) => Promise<boolean>;\n  getUserInfo: (address: string) => Promise<any>;\n  approveTokens: (amount: string) => Promise<boolean>;\n  approveAndStake: (amount: string, lockYears: number, referrer: string) => Promise<boolean>;\n  // Swap contract functions\n  buyTokens: (usdtAmount: string, deadline: number) => Promise<boolean>;\n  sellTokens: (exaaAmount: string, deadline: number) => Promise<boolean>;\n  approveUSDT: (amount: string) => Promise<boolean>;\n  approveExaaForSelling: (amount: string) => Promise<boolean>;\n}\n\nconst ContractContext = createContext<ContractContextType | undefined>(undefined);\n\n// ERC20 ABI for token approval\nconst ERC20_ABI = [\n  \"function approve(address spender, uint256 amount) external returns (bool)\",\n  \"function allowance(address owner, address spender) external view returns (uint256)\"\n];\n\nexport function ContractProvider({ children }: { children: React.ReactNode }) {\n  const { signer, isConnected, isHoleskyNetwork, switchToHoleskyNetwork } = useWallet();\n  const [stakingContract, setStakingContract] = useState<ethers.Contract | null>(null);\n  const [tokenContract, setTokenContract] = useState<ethers.Contract | null>(null);\n  const [swapContract, setSwapContract] = useState<ethers.Contract | null>(null);\n  const [usdtContract, setUsdtContract] = useState<ethers.Contract | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const initializeContracts = async () => {\n      if (signer && isConnected) {\n        // Check if we're on Holesky network, if not, prompt to switch\n        if (!isHoleskyNetwork) {\n          try {\n            const switched = await switchToHoleskyNetwork();\n            if (!switched) {\n              setError('Please switch to Holesky testnet to use this application');\n              return;\n            }\n          } catch (err: any) {\n            console.error('Error switching to Holesky:', err);\n            setError('Failed to switch to Holesky testnet');\n            return;\n          }\n        }\n        \n        try {\n          // Initialize contracts\n          const newStakingContract = new ethers.Contract(\n            EXAA_STAKING_ADDRESS,\n            ExaaStakingABI.abi,\n            signer\n          );\n          \n          const newTokenContract = new ethers.Contract(\n            EXAA_TOKEN_ADDRESS,\n            ERC20_ABI,\n            signer\n          );\n          \n          const newSwapContract = new ethers.Contract(\n            EXAA_SWAP_ADDRESS,\n            ExaaSwapABI.abi,\n            signer\n          );\n          \n          const newUsdtContract = new ethers.Contract(\n            USDT_TOKEN_ADDRESS,\n            ERC20_ABI,\n            signer\n          );\n          \n          setStakingContract(newStakingContract);\n          setTokenContract(newTokenContract);\n          setSwapContract(newSwapContract);\n          setUsdtContract(newUsdtContract);\n          setError(null);\n        } catch (err: any) {\n          console.error('Error initializing contracts:', err);\n          setError(err.message || 'Error initializing contracts');\n        }\n      } else {\n        // Reset contracts if wallet disconnects\n        setStakingContract(null);\n        setTokenContract(null);\n        setSwapContract(null);\n        setUsdtContract(null);\n        setError(null);\n      }\n    };\n    \n    initializeContracts();\n  }, [signer, isConnected, isHoleskyNetwork, switchToHoleskyNetwork]);\n\n  // Combined approve and stake function\n  const approveAndStake = async (amount: string, lockYears: number, referrer: string): Promise<boolean> => {\n    if (!tokenContract || !stakingContract || !isConnected) {\n      setError('Wallet not connected or contracts not initialized');\n      return false;\n    }\n\n    // Ensure we're on Holesky network\n    if (!isHoleskyNetwork) {\n      try {\n        const switched = await switchToHoleskyNetwork();\n        if (!switched) {\n          setError('Please switch to Holesky testnet to stake tokens');\n          return false;\n        }\n      } catch (err: any) {\n        console.error('Error switching to Holesky:', err);\n        setError('Failed to switch to Holesky testnet');\n        return false;\n      }\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Validate and format amount\n      if (!amount || isNaN(Number(amount)) || Number(amount) <= 0) {\n        setError('Invalid amount');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Convert string amount to Wei (proper format for contract)\n      const amountInWei = ethers.utils.parseEther(amount.toString().trim());\n      \n      // Validate lock period (must be positive integer)\n      if (!Number.isInteger(lockYears) || lockYears <= 0) {\n        setError('Lock period must be a positive integer');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Ensure referrer address is valid\n      const formattedReferrer = referrer && referrer !== '0x0000000000000000000000000000000000000000' \n        ? ethers.utils.getAddress(referrer) // Normalize address format\n        : '0x0000000000000000000000000000000000000000';\n      \n      console.log('Approving tokens:', {\n        amount: amount,\n        amountInWei: amountInWei.toString(),\n        stakingContract: EXAA_STAKING_ADDRESS\n      });\n      \n      // First approve tokens\n      const approveTx = await tokenContract.approve(EXAA_STAKING_ADDRESS, amountInWei);\n      await approveTx.wait();\n      \n      console.log('Tokens approved, now staking with parameters:', {\n        amount: amount,\n        amountInWei: amountInWei.toString(),\n        lockYears: lockYears,\n        referrer: formattedReferrer\n      });\n      \n      // Then stake tokens\n      const stakeTx = await stakingContract.stake(amountInWei, lockYears, formattedReferrer);\n      await stakeTx.wait();\n      \n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error in approve and stake process:', err);\n      \n      // Check if user rejected transaction\n      if (err.code === 4001 || err.message?.includes('user rejected')) {\n        setError('Transaction was cancelled by user');\n      } else {\n        setError(err.message || 'Failed to complete staking process');\n      }\n      \n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Approve tokens for staking on Holesky testnet\n  const approveTokens = async (amount: string): Promise<boolean> => {\n    if (!tokenContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    // Ensure we're on Holesky network\n    if (!isHoleskyNetwork) {\n      try {\n        const switched = await switchToHoleskyNetwork();\n        if (!switched) {\n          setError('Please switch to Holesky testnet to approve tokens');\n          return false;\n        }\n      } catch (err: any) {\n        console.error('Error switching to Holesky:', err);\n        setError('Failed to switch to Holesky testnet');\n        return false;\n      }\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Validate amount\n      if (!amount || isNaN(Number(amount)) || Number(amount) <= 0) {\n        setError('Invalid token amount for approval');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Convert to Wei (proper format for contract)\n      const amountInWei = ethers.utils.parseEther(amount.toString().trim());\n      \n      console.log('Approving tokens:', {\n        amount: amount,\n        amountInWei: amountInWei.toString(),\n        stakingContract: EXAA_STAKING_ADDRESS\n      });\n      \n      const tx = await tokenContract.approve(EXAA_STAKING_ADDRESS, amountInWei);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error approving tokens:', err);\n      setError(err.message || 'Failed to approve tokens');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Stake tokens on Holesky testnet\n  const stake = async (amount: string, lockYears: number, referrer: string): Promise<boolean> => {\n    if (!stakingContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    // Ensure we're on Holesky network\n    if (!isHoleskyNetwork) {\n      try {\n        const switched = await switchToHoleskyNetwork();\n        if (!switched) {\n          setError('Please switch to Holesky testnet to stake tokens');\n          return false;\n        }\n      } catch (err: any) {\n        console.error('Error switching to Holesky:', err);\n        setError('Failed to switch to Holesky testnet');\n        return false;\n      }\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Validate and format amount\n      if (!amount || isNaN(Number(amount)) || Number(amount) <= 0) {\n        setError('Invalid stake amount');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Convert string amount to Wei (proper format for contract)\n      const amountInWei = ethers.utils.parseEther(amount.toString().trim());\n      \n      // Validate lock period (must be positive integer)\n      if (!Number.isInteger(lockYears) || lockYears <= 0) {\n        setError('Lock period must be a positive integer');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Ensure referrer address is valid\n      const formattedReferrer = referrer && referrer !== '0x0000000000000000000000000000000000000000' \n        ? ethers.utils.getAddress(referrer) // Normalize address format\n        : '0x0000000000000000000000000000000000000000';\n      \n      console.log('Staking with parameters:', {\n        amount: amount,\n        amountInWei: amountInWei.toString(),\n        lockYears: lockYears,\n        referrer: formattedReferrer\n      });\n      \n      const tx = await stakingContract.stake(amountInWei, lockYears, formattedReferrer);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error staking tokens:', err);\n      setError(err.message || 'Failed to stake tokens');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Add referrer on Holesky testnet\n  const addReferrer = async (referrer: string): Promise<boolean> => {\n    if (!stakingContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    // Ensure we're on Holesky network\n    if (!isHoleskyNetwork) {\n      try {\n        const switched = await switchToHoleskyNetwork();\n        if (!switched) {\n          setError('Please switch to Holesky testnet to add referrer');\n          return false;\n        }\n      } catch (err: any) {\n        console.error('Error switching to Holesky:', err);\n        setError('Failed to switch to Holesky testnet');\n        return false;\n      }\n    }\n\n    try {\n      setIsLoading(true);\n      const tx = await stakingContract.addReferrer(referrer);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error adding referrer:', err);\n      setError(err.message || 'Failed to add referrer');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Get user info from Holesky testnet\n  const getUserInfo = async (address: string): Promise<any> => {\n    if (!stakingContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return null;\n    }\n\n    // Ensure we're on Holesky network\n    if (!isHoleskyNetwork) {\n      try {\n        const switched = await switchToHoleskyNetwork();\n        if (!switched) {\n          setError('Please switch to Holesky testnet to get user info');\n          return null;\n        }\n      } catch (err: any) {\n        console.error('Error switching to Holesky:', err);\n        setError('Failed to switch to Holesky testnet');\n        return null;\n      }\n    }\n\n    try {\n      setIsLoading(true);\n      const userInfo = await stakingContract.users(address);\n      setIsLoading(false);\n      return {\n        isRegistered: userInfo.isRegistered,\n        referrer: userInfo.referrer,\n        lastInteractionTimestamp: userInfo.lastInteractionTimestamp.toString(),\n        registrationTimestamp: userInfo.registrationTimestamp.toString(),\n        pendingReferralRewards: ethers.utils.formatEther(userInfo.pendingReferralRewards)\n      };\n    } catch (err: any) {\n      console.error('Error getting user info:', err);\n      setError(err.message || 'Failed to get user information');\n      setIsLoading(false);\n      return null;\n    }\n  };\n\n  // Buy tokens with USDT\n  const buyTokens = async (usdtAmount: string, deadline: number): Promise<boolean> => {\n    if (!swapContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      // USDT typically has 6 decimals\n      const amountInWei = ethers.utils.parseUnits(usdtAmount, 6);\n      const tx = await swapContract.buyTokens(amountInWei, deadline);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error buying tokens:', err);\n      setError(err.message || 'Failed to buy tokens');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Sell Exaa tokens for USDT\n  const sellTokens = async (exaaAmount: string, deadline: number): Promise<boolean> => {\n    if (!swapContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      const amountInWei = ethers.utils.parseEther(exaaAmount);\n      const tx = await swapContract.sellTokens(amountInWei, deadline);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error selling tokens:', err);\n      setError(err.message || 'Failed to sell tokens');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Approve USDT for buying Exaa tokens\n  const approveUSDT = async (amount: string): Promise<boolean> => {\n    if (!usdtContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      // USDT typically has 6 decimals\n      const amountInWei = ethers.utils.parseUnits(amount, 6);\n      const tx = await usdtContract.approve(EXAA_SWAP_ADDRESS, amountInWei);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error approving USDT:', err);\n      setError(err.message || 'Failed to approve USDT');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // Approve Exaa tokens for selling\n  const approveExaaForSelling = async (amount: string): Promise<boolean> => {\n    if (!tokenContract || !isConnected) {\n      setError('Wallet not connected or contract not initialized');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      const amountInWei = ethers.utils.parseEther(amount);\n      const tx = await tokenContract.approve(EXAA_SWAP_ADDRESS, amountInWei);\n      await tx.wait();\n      setIsLoading(false);\n      return true;\n    } catch (err: any) {\n      console.error('Error approving Exaa tokens:', err);\n      setError(err.message || 'Failed to approve Exaa tokens');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  return (\n    <ContractContext.Provider\n      value={{\n        stakingContract,\n        tokenContract,\n        swapContract,\n        usdtContract,\n        isLoading,\n        error,\n        stake,\n        addReferrer,\n        getUserInfo,\n        approveTokens,\n        approveAndStake,\n        buyTokens,\n        sellTokens,\n        approveUSDT,\n        approveExaaForSelling\n      }}\n    >\n      {children}\n    </ContractContext.Provider>\n  );\n}\n\nexport function useContract() {\n  const context = useContext(ContractContext);\n  if (context === undefined) {\n    throw new Error('useContract must be used within a ContractProvider');\n  }\n  return context;\n}","size_bytes":17205},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-wallet.tsx":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\nimport { ethers } from 'ethers';\n\ninterface WalletContextType {\n  isConnected: boolean;\n  walletAddress: string | null;\n  connect: () => Promise<void>;\n  disconnect: () => void;\n  switchToHoleskyNetwork: () => Promise<boolean>;\n  provider: ethers.providers.Web3Provider | null;\n  signer: ethers.Signer | null;\n  chainId: number | null;\n  isHoleskyNetwork: boolean;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\n// Holesky testnet chain ID and RPC\nconst HOLESKY_CHAIN_ID = '0x4268'; // Chain ID for Holesky testnet (decimal: 17000)\nconst HOLESKY_RPC_URL = 'https://ethereum-holesky-rpc.publicnode.com';\n\nexport function WalletProvider({ children }: { children: React.ReactNode }) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState<string | null>(null);\n  const [provider, setProvider] = useState<ethers.providers.Web3Provider | null>(null);\n  const [signer, setSigner] = useState<ethers.Signer | null>(null);\n  const [chainId, setChainId] = useState<number | null>(null);\n  const [isHoleskyNetwork, setIsHoleskyNetwork] = useState(false);\n\n  // Function to switch to Holesky testnet\n  const switchToHoleskyNetwork = async (): Promise<boolean> => {\n    if (!window.ethereum) {\n      alert('Please install MetaMask or another Ethereum wallet extension!');\n      return false;\n    }\n\n    try {\n      // Try to switch to Holesky network\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: HOLESKY_CHAIN_ID }],\n      });\n      \n      // Update network status\n      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n      const network = await web3Provider.getNetwork();\n      setChainId(network.chainId);\n      setIsHoleskyNetwork(network.chainId === parseInt(HOLESKY_CHAIN_ID, 16));\n      \n      return true;\n    } catch (error: any) {\n      // If the error code is 4902, the chain hasn't been added to MetaMask\n      if (error.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: HOLESKY_CHAIN_ID,\n                chainName: 'Holesky Testnet',\n                nativeCurrency: {\n                  name: 'Holesky ETH',\n                  symbol: 'ETH',\n                  decimals: 18,\n                },\n                rpcUrls: [HOLESKY_RPC_URL],\n                blockExplorerUrls: ['https://holesky.etherscan.io/'],\n              },\n            ],\n          });\n          \n          // Try switching again after adding\n          return switchToHoleskyNetwork();\n        } catch (addError) {\n          console.error('Error adding Holesky network:', addError);\n          return false;\n        }\n      }\n      console.error('Error switching to Holesky network:', error);\n      return false;\n    }\n  };\n\n  useEffect(() => {\n    // Check if wallet was previously connected\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n          if (accounts.length > 0) {\n            const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n            const web3Signer = web3Provider.getSigner();\n            const address = await web3Signer.getAddress();\n            const network = await web3Provider.getNetwork();\n            \n            setProvider(web3Provider);\n            setSigner(web3Signer);\n            setWalletAddress(address);\n            setChainId(network.chainId);\n            setIsConnected(true);\n            setIsHoleskyNetwork(network.chainId === parseInt(HOLESKY_CHAIN_ID, 16));\n          }\n        } catch (error) {\n          console.error('Error checking wallet connection:', error);\n        }\n      }\n    };\n\n    checkConnection();\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', (accounts: string[]) => {\n        if (accounts.length === 0) {\n          // User disconnected their wallet\n          disconnect();\n        } else {\n          // User switched accounts\n          checkConnection();\n        }\n      });\n\n      // Listen for chain changes\n      window.ethereum.on('chainChanged', () => {\n        window.location.reload();\n      });\n    }\n\n    return () => {\n      // Clean up listeners\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners('accountsChanged');\n        window.ethereum.removeAllListeners('chainChanged');\n      }\n    };\n  }, []);\n\n  const connect = async () => {\n    try {\n      // Check if MetaMask is installed\n      if (!window.ethereum) {\n        alert('Please install MetaMask wallet extension!');\n        return;\n      }\n\n      // Force MetaMask to be used as the provider\n      const web3Provider = new ethers.providers.Web3Provider(window.ethereum, 'any');\n      \n      // Request account access\n      await window.ethereum.request({ \n        method: 'eth_requestAccounts',\n      });\n      \n      const web3Signer = web3Provider.getSigner();\n      const address = await web3Signer.getAddress();\n      const network = await web3Provider.getNetwork();\n      \n      setProvider(web3Provider);\n      setSigner(web3Signer);\n      setWalletAddress(address);\n      setChainId(network.chainId);\n      setIsConnected(true);\n      setIsHoleskyNetwork(network.chainId === parseInt(HOLESKY_CHAIN_ID, 16));\n      \n      // Automatically try to switch to Holesky network if not already on it\n      if (network.chainId !== parseInt(HOLESKY_CHAIN_ID, 16)) {\n        await switchToHoleskyNetwork();\n      }\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      alert('Failed to connect wallet. Please try again.');\n    }\n  };\n\n  const disconnect = () => {\n    setWalletAddress(null);\n    setIsConnected(false);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n  };\n\n  return (\n    <WalletContext.Provider value={{ \n      isConnected, \n      walletAddress, \n      connect, \n      disconnect, \n      switchToHoleskyNetwork,\n      provider, \n      signer,\n      chainId,\n      isHoleskyNetwork\n    }}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n}\n\n// Add this to global Window interface\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n","size_bytes":6624},"client/src/lib/constants.ts":{"content":"export const APY_RATES = {\n  12: 10, // 1 year = 10% monthly\n  24: 12, // 2 years = 12% monthly  \n  36: 15, // 3 years = 15% monthly\n} as const;\n\nexport const REFERRAL_COMMISSION_RATES = [\n  { level: 1, rate: 12 },\n  { level: 2, rate: 8 },\n  { level: 3, rate: 6 },\n  { level: 4, rate: 4 },\n  { level: 5, rate: 2 },\n  { level: 6, rate: 1 },\n  { level: 7, rate: 1 },\n  { level: 8, rate: 1 },\n  { level: 9, rate: 1 },\n  { level: 10, rate: 1 },\n  { level: 11, rate: 0.75 },\n  { level: 12, rate: 0.75 },\n  { level: 13, rate: 0.75 },\n  { level: 14, rate: 0.75 },\n  { level: 15, rate: 0.75 },\n  { level: 16, rate: 0.5 },\n  { level: 17, rate: 0.5 },\n  { level: 18, rate: 0.5 },\n  { level: 19, rate: 0.5 },\n  { level: 20, rate: 0.5 },\n  { level: 21, rate: 0.25 },\n  { level: 22, rate: 0.25 },\n  { level: 23, rate: 0.25 },\n  { level: 24, rate: 0.25 },\n  { level: 25, rate: 0.25 },\n] as const;\n\nexport const LOCK_PERIODS = [\n  { months: 12, label: \"1 Year\", apy: 10 },\n  { months: 24, label: \"2 Years\", apy: 12 },\n  { months: 36, label: \"3 Years\", apy: 15 },\n] as const;\n","size_bytes":1060},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Link } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Slider } from '@/components/ui/slider';\nimport { APP_NAME, COIN_TICKER, STAKED_DERIVATIVE, BRANDING } from '@/lib/branding';\n\nexport default function Home() {\n  const [stakeAmount, setStakeAmount] = useState(1);\n  const [lockPeriod, setLockPeriod] = useState([12]);\n  const [hoveredFeature, setHoveredFeature] = useState<number | null>(null);\n\n  // Staking calculations\n  const apy = 2.38;\n  const zePrice = BRANDING.DEFAULT_PRICE_USD;\n  const annualReward = stakeAmount * (apy / 100);\n  const osZEReceived = stakeAmount * 0.94;\n\n  useEffect(() => {\n    // Set vibrant gradient background\n    document.body.style.background = 'linear-gradient(135deg, #ec4899 0%, #8b5cf6 50%, #3b82f6 100%)';\n    return () => {\n      document.body.style.background = '';\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen text-white\">\n      {/* Hero Section with Staking Calculator */}\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden pt-20 px-6\">\n        <div className=\"container mx-auto max-w-7xl\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            \n            {/* Left Side - Hero Text */}\n            <div className=\"space-y-8\">\n              <div>\n                <h1 className=\"text-6xl md:text-7xl font-black leading-tight\">\n                  <span className=\"bg-gradient-to-r from-cyan-400 via-purple-600 to-pink-500 bg-clip-text text-transparent\">\n                    Stake {COIN_TICKER}\n                  </span>\n                  <br />\n                  <span className=\"text-white\">on your</span>\n                  <br />\n                  <span className=\"bg-gradient-to-r from-cyan-400 via-purple-600 to-pink-500 bg-clip-text text-transparent\">\n                    terms.\n                  </span>\n                </h1>\n              </div>\n              \n              <div className=\"space-y-4 text-gray-300 text-lg max-w-lg\">\n                <p>Go Solo or Pool with others.</p>\n                <p>Stake or unstake in seconds.</p>\n                <p>Use your stake in DeFi.</p>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-3 gap-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <div className=\"w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center mr-2\">\n                      <span className=\"text-xs\">👥</span>\n                    </div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-white\" data-testid=\"text-total-stakers\">86k+</div>\n                  <div className=\"text-sm text-gray-300\">Total stakers</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <div className=\"w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center mr-2\">\n                      <span className=\"text-xs\">💎</span>\n                    </div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-white\" data-testid=\"text-total-staked\">{COIN_TICKER} 317.63k</div>\n                  <div className=\"text-sm text-gray-300\">Total staked</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"flex items-center justify-center mb-2\">\n                    <div className=\"w-6 h-6 bg-gray-400 rounded-full flex items-center justify-center mr-2\">\n                      <span className=\"text-xs\">🏆</span>\n                    </div>\n                  </div>\n                  <div className=\"text-3xl font-bold text-white\" data-testid=\"text-rewards-paid\">{COIN_TICKER} 26.14k</div>\n                  <div className=\"text-sm text-gray-300\">Rewards paid</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Side - Staking Calculator Widget */}\n            <div className=\"space-y-4\">\n              {/* APY and Reward Cards */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Card className=\"bg-white/80 backdrop-blur-md border-white/40 rounded-2xl\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-sm text-gray-600 mb-1\">APY</div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{apy}%</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"bg-white/80 backdrop-blur-md border-white/40 rounded-2xl\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-sm text-gray-600 mb-1\">Proj. annual reward</div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{COIN_TICKER} {annualReward.toFixed(5)}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Main Staking Input */}\n              <Card className=\"bg-white/90 backdrop-blur-md border-white/50 rounded-2xl shadow-xl\">\n                <CardContent className=\"p-6 space-y-6\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <Input\n                        type=\"number\"\n                        value={stakeAmount}\n                        onChange={(e) => setStakeAmount(parseFloat(e.target.value) || 0)}\n                        className=\"text-4xl font-bold bg-transparent border-none text-gray-900 placeholder-gray-500 p-0 h-auto focus:outline-none\"\n                        style={{ fontSize: '2.5rem', fontWeight: 'bold' }}\n                        min=\"0\"\n                        step=\"0.1\"\n                        data-testid=\"input-stake-amount\"\n                      />\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-gray-900\">{COIN_TICKER}</div>\n                      </div>\n                    </div>\n                    <div className=\"text-gray-600\">$ {(stakeAmount * zePrice).toLocaleString()}</div>\n                  </div>\n\n                  {/* Lock Period Slider */}\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm text-gray-700 font-medium\">Lock Period: {lockPeriod[0]} months</div>\n                    <Slider\n                      value={lockPeriod}\n                      onValueChange={setLockPeriod}\n                      max={36}\n                      min={1}\n                      step={1}\n                      className=\"w-full\"\n                    />\n                  </div>\n\n                  {/* Reward Info */}\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center text-gray-600\">\n                      You will receive\n                      <div className=\"w-4 h-4 bg-gray-400 rounded-full ml-2 flex items-center justify-center\">\n                        <span className=\"text-xs\">ℹ</span>\n                      </div>\n                    </div>\n                    <div className=\"font-bold text-gray-900\">{osZEReceived.toFixed(2)} {STAKED_DERIVATIVE}</div>\n                  </div>\n\n                  {/* Stake Button */}\n                  <Link href=\"/stake\">\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold py-4 rounded-full text-lg shadow-lg hover:shadow-xl transition-all duration-300\"\n                      data-testid=\"button-stake\"\n                    >\n                      Stake\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Enhanced Why Choose Hica Section */}\n      <section className=\"py-24 relative\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl font-bold mb-6 text-white\">\n              Why Choose \n              <span className=\"bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent ml-3\">\n                {APP_NAME}\n              </span>\n              ?\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n              Experience the most advanced staking ecosystem with unmatched security, \n              liquidity, and rewards designed for both beginners and validators\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Simple and Secure Staking */}\n            <Card \n              className={`relative overflow-hidden bg-white/10 backdrop-blur-md border-white/20 rounded-3xl transition-all duration-500 hover:scale-105 cursor-pointer ${\n                hoveredFeature === 0 ? 'bg-white/20 border-white/40' : ''\n              }`}\n              onMouseEnter={() => setHoveredFeature(0)}\n              onMouseLeave={() => setHoveredFeature(null)}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-white/5 to-transparent\"></div>\n              <CardContent className=\"p-8 text-center relative z-10\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-white/10 backdrop-blur-md rounded-2xl flex items-center justify-center\">\n                  <div className=\"text-4xl\">🔐</div>\n                </div>\n                <h3 className=\"text-2xl font-bold mb-4 text-white\">Simple and secure</h3>\n                <h4 className=\"text-lg font-semibold text-white mb-4\">staking with {STAKED_DERIVATIVE}.</h4>\n                \n                <div className=\"space-y-4 text-gray-300 text-left\">\n                  <p className=\"text-sm leading-relaxed\">\n                    Get <span className=\"text-white font-semibold\">{STAKED_DERIVATIVE}</span> and start staking in \n                    seconds. Staking has never been easier.\n                  </p>\n                  <p className=\"text-sm leading-relaxed\">\n                    <span className=\"text-white font-semibold\">Earn staking rewards</span> every second \n                    by holding {STAKED_DERIVATIVE}.\n                  </p>\n                </div>\n\n                <div className=\"mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"bg-white/10 border-white/30 text-white hover:bg-white/20 rounded-full px-6 py-2\"\n                  >\n                    Stake with {STAKED_DERIVATIVE}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Staking Marketplace */}\n            <Card \n              className={`relative overflow-hidden bg-gradient-to-br from-pink-500/20 to-orange-500/20 backdrop-blur-md border-pink-500/30 rounded-3xl transition-all duration-500 hover:scale-105 cursor-pointer ${\n                hoveredFeature === 1 ? 'from-pink-500/30 to-orange-500/30 border-pink-500/50' : ''\n              }`}\n              onMouseEnter={() => setHoveredFeature(1)}\n              onMouseLeave={() => setHoveredFeature(null)}\n            >\n              <CardContent className=\"p-8 text-center relative z-10\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-white/20 backdrop-blur-md rounded-2xl flex items-center justify-center\">\n                  <div className=\"text-4xl\">📦</div>\n                </div>\n                <h3 className=\"text-2xl font-bold mb-2 text-white\">Staking</h3>\n                <h4 className=\"text-xl font-bold mb-2 text-white\">marketplace with</h4>\n                <h4 className=\"text-xl font-bold mb-6 text-white\">unbeatable terms.</h4>\n                \n                <div className=\"space-y-4 text-gray-100 text-left\">\n                  <p className=\"text-sm leading-relaxed\">\n                    Browse <span className=\"text-white font-semibold\">Vaults</span> and stake with the \n                    node operators that meet your criteria.\n                  </p>\n                  <p className=\"text-sm leading-relaxed\">\n                    <span className=\"text-white font-semibold\">Higher yield, more decentralization</span> and control.\n                  </p>\n                </div>\n\n                <div className=\"mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"bg-white/20 border-white/40 text-white hover:bg-white/30 rounded-full px-6 py-2\"\n                  >\n                    Stake with Vaults\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Liquid Solo Staking */}\n            <Card \n              className={`relative overflow-hidden bg-gray-900/50 backdrop-blur-md border-gray-700/50 rounded-3xl transition-all duration-500 hover:scale-105 cursor-pointer ${\n                hoveredFeature === 2 ? 'bg-gray-800/60 border-gray-600/60' : ''\n              }`}\n              onMouseEnter={() => setHoveredFeature(2)}\n              onMouseLeave={() => setHoveredFeature(null)}\n            >\n              <CardContent className=\"p-8 text-center relative z-10\">\n                <div className=\"w-20 h-20 mx-auto mb-6 bg-white/10 backdrop-blur-md rounded-2xl flex items-center justify-center\">\n                  <div className=\"text-4xl\">🔬</div>\n                </div>\n                <h3 className=\"text-2xl font-bold mb-2 text-white\">Liquid staking</h3>\n                <h4 className=\"text-xl font-bold mb-6 text-white\">for your solo validators.</h4>\n                \n                <div className=\"space-y-4 text-gray-300 text-left\">\n                  <p className=\"text-sm leading-relaxed\">\n                    <span className=\"text-white font-semibold\">Liquid solo staking</span> for anyone \n                    who can run a node.\n                  </p>\n                  <p className=\"text-sm leading-relaxed\">\n                    Open your own Vault and <span className=\"text-white font-semibold\">accept \n                    delegations</span> from others. <span className=\"text-white font-semibold\">No \n                    collateral needed.</span>\n                  </p>\n                </div>\n\n                <div className=\"mt-6\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"bg-white/10 border-white/30 text-white hover:bg-white/20 rounded-full px-6 py-2\"\n                  >\n                    Become an Operator\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Interactive Get Started Section */}\n      <section className=\"py-24 relative bg-gradient-to-br from-purple-900/30 to-pink-900/30\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-5xl font-bold mb-6 text-white\">\n              Get Started \n              <span className=\"bg-gradient-to-r from-cyan-400 to-purple-600 bg-clip-text text-transparent ml-3\">\n                Today\n              </span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Join thousands of users earning rewards through our revolutionary staking platform\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {/* Quick Stake */}\n            <Link href=\"/stake\">\n              <Card className=\"group relative overflow-hidden bg-gradient-to-br from-blue-500/20 to-purple-600/20 backdrop-blur-md border-blue-500/30 rounded-3xl transition-all duration-700 hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/25 cursor-pointer\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400/10 to-purple-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <CardContent className=\"p-8 text-center relative z-10\">\n                  <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-blue-400 to-purple-600 rounded-3xl flex items-center justify-center group-hover:rotate-12 group-hover:scale-110 transition-transform duration-500\">\n                    <div className=\"text-4xl\">⚡</div>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-white\">Quick Stake</h3>\n                  <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                    Start earning rewards instantly with our one-click staking solution. Perfect for beginners.\n                  </p>\n                  <div className=\"space-y-3 text-sm text-gray-300 text-left\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-3\"></div>\n                      <span>Instant staking in seconds</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full mr-3\"></div>\n                      <span>Up to 15% monthly returns</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-pink-400 rounded-full mr-3\"></div>\n                      <span>Flexible lock periods</span>\n                    </div>\n                  </div>\n                  <Button className=\"mt-6 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-semibold py-3 px-8 rounded-full transition-all duration-300 group-hover:shadow-lg\">\n                    Start Staking\n                  </Button>\n                </CardContent>\n              </Card>\n            </Link>\n\n            {/* Token Swap */}\n            <Link href=\"/swap\">\n              <Card className=\"group relative overflow-hidden bg-gradient-to-br from-emerald-500/20 to-teal-600/20 backdrop-blur-md border-emerald-500/30 rounded-3xl transition-all duration-700 hover:scale-105 hover:shadow-2xl hover:shadow-emerald-500/25 cursor-pointer\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-400/10 to-teal-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <CardContent className=\"p-8 text-center relative z-10\">\n                  <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-emerald-400 to-teal-600 rounded-3xl flex items-center justify-center group-hover:rotate-12 group-hover:scale-110 transition-transform duration-500\">\n                    <div className=\"text-4xl\">🔄</div>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-white\">Token Exchange</h3>\n                  <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                    Seamlessly swap between USDT and {COIN_TICKER} tokens with zero fees and instant execution.\n                  </p>\n                  <div className=\"space-y-3 text-sm text-gray-300 text-left\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-emerald-400 rounded-full mr-3\"></div>\n                      <span>1:1 exchange ratio</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-teal-400 rounded-full mr-3\"></div>\n                      <span>Zero transaction fees</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full mr-3\"></div>\n                      <span>Instant processing</span>\n                    </div>\n                  </div>\n                  <Button className=\"mt-6 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white font-semibold py-3 px-8 rounded-full transition-all duration-300 group-hover:shadow-lg\">\n                    Swap Tokens\n                  </Button>\n                </CardContent>\n              </Card>\n            </Link>\n\n            {/* Referral Network */}\n            <Link href=\"/profile\">\n              <Card className=\"group relative overflow-hidden bg-gradient-to-br from-orange-500/20 to-red-600/20 backdrop-blur-md border-orange-500/30 rounded-3xl transition-all duration-700 hover:scale-105 hover:shadow-2xl hover:shadow-orange-500/25 cursor-pointer\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-orange-400/10 to-red-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                <CardContent className=\"p-8 text-center relative z-10\">\n                  <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-orange-400 to-red-600 rounded-3xl flex items-center justify-center group-hover:rotate-12 group-hover:scale-110 transition-transform duration-500\">\n                    <div className=\"text-4xl\">🌐</div>\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-4 text-white\">Build Network</h3>\n                  <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                    Earn passive income through our 25-level referral system with exponential rewards.\n                  </p>\n                  <div className=\"space-y-3 text-sm text-gray-300 text-left\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-orange-400 rounded-full mr-3\"></div>\n                      <span>Up to 12% commission</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-red-400 rounded-full mr-3\"></div>\n                      <span>25 referral levels</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-2 h-2 bg-pink-400 rounded-full mr-3\"></div>\n                      <span>Passive income stream</span>\n                    </div>\n                  </div>\n                  <Button className=\"mt-6 bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white font-semibold py-3 px-8 rounded-full transition-all duration-300 group-hover:shadow-lg\">\n                    Join Network\n                  </Button>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n\n          {/* Call to Action Banner */}\n          <div className=\"mt-16 text-center\">\n            <div className=\"inline-flex items-center bg-gradient-to-r from-pink-500/20 to-purple-600/20 backdrop-blur-md border border-pink-500/30 rounded-full px-8 py-4\">\n              <span className=\"text-white text-lg font-semibold\">Ready to maximize your returns?</span>\n              <Link href=\"/stake\">\n                <Button className=\"ml-4 bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white font-semibold py-2 px-6 rounded-full transition-all duration-300 hover:shadow-lg hover:scale-105\">\n                  Start Now →\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Simple Footer */}\n      <footer className=\"py-16 relative\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-6\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-pink-500 to-purple-600 rounded-xl\"></div>\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-pink-500 to-purple-600 bg-clip-text text-transparent\">\n                HICA\n              </span>\n            </div>\n            <p className=\"text-gray-400 mb-6 max-w-lg mx-auto\">\n              The future of decentralized staking with innovative rewards and community-driven growth.\n            </p>\n            <div className=\"text-sm text-gray-500\">\n              © 2024 HICA Protocol. All rights reserved.\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":24310},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWallet } from '@/hooks/use-wallet';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { User, Referral } from '@shared/schema';\nimport ReferralNetwork from '@/components/referral-network';\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { walletAddress, isConnected } = useWallet();\n  const [referralCode, setReferralCode] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n\n  // Fetch user data\n  const { data: user, isLoading: userLoading } = useQuery<User>({\n    queryKey: ['/api/users', walletAddress],\n    enabled: !!walletAddress,\n  });\n\n  // Fetch user referrals\n  const { data: referrals = [], isLoading: referralsLoading } = useQuery<Referral[]>({\n    queryKey: ['/api/referrals', user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Registration mutation\n  const registerMutation = useMutation({\n    mutationFn: async (data: { walletAddress: string; referrerCode?: string }) => {\n      const response = await apiRequest('POST', '/api/users/register', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Registration Successful!',\n        description: 'Welcome to HICA Protocol! You can now start staking.',\n      });\n      setIsRegistering(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Registration Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Fetch user stakes for unstaking\n  const { data: userStakes } = useQuery({\n    queryKey: ['userStakes', walletAddress],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/stakes/user/${walletAddress}`);\n      return response.json();\n    },\n    enabled: !!walletAddress && !!user\n  });\n\n  // Claim referral rewards mutation\n  const claimMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/referrals/claim', {\n        userId: user?.id,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Rewards Claimed!',\n        description: `Successfully claimed ${parseFloat(data.claimed).toLocaleString()} HICA tokens.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Claim Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Unstake mutation\n  const unstakeMutation = useMutation({\n    mutationFn: async (stakeId: string) => {\n      const response = await apiRequest('POST', `/api/stakes/${stakeId}/unstake`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Unstaking Successful!',\n        description: 'Your tokens have been unstaked and rewards claimed.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['userStakes', walletAddress] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', walletAddress] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Unstaking Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleRegister = () => {\n    if (!walletAddress) return;\n    \n    registerMutation.mutate({\n      walletAddress,\n      referrerCode: referralCode || undefined,\n    });\n  };\n\n  const formatDate = (date: Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n    });\n  };\n\n  const generateReferralLink = () => {\n    const domain = window.location.origin;\n    return `${domain}/register?ref=${user?.referralCode}`;\n  };\n\n  // Not connected state\n  if (!isConnected) {\n    return (\n      <div className=\"min-h-screen pt-24 pb-20 flex items-center justify-center\">\n        <Card className=\"glass-card p-8 text-center max-w-md\">\n          <CardContent>\n            <i className=\"fas fa-wallet text-6xl text-muted-foreground mb-4\"></i>\n            <h2 className=\"text-2xl font-bold mb-4\">Wallet Not Connected</h2>\n            <p className=\"text-muted-foreground\">\n              Please connect your wallet to view your profile.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Registration state\n  if (!user && !userLoading) {\n    return (\n      <div className=\"min-h-screen pt-24 pb-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-5xl font-bold mb-4\">\n              <span className=\"bg-gradient-to-r from-secondary to-accent bg-clip-text text-transparent\">\n                Join the Network\n              </span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">Register with a referral code and start earning from day one</p>\n          </div>\n\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {/* Registration Form */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl font-bold\">Create Account</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label className=\"block text-sm font-medium mb-2\">Wallet Address</Label>\n                    <Input\n                      type=\"text\"\n                      value={walletAddress || ''}\n                      disabled\n                      className=\"w-full p-4 bg-muted/20 rounded-xl border border-border\"\n                      data-testid=\"input-wallet-address\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"block text-sm font-medium mb-2\">Referral Code (Optional)</Label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Enter referral code\"\n                      value={referralCode}\n                      onChange={(e) => setReferralCode(e.target.value)}\n                      className=\"w-full p-4 bg-muted/20 rounded-xl border border-border focus:border-primary transition-colors\"\n                      data-testid=\"input-referral-code\"\n                    />\n                  </div>\n                  <Button\n                    onClick={handleRegister}\n                    disabled={registerMutation.isPending}\n                    className=\"neon-button w-full py-4 rounded-xl font-bold\"\n                    data-testid=\"button-register-account\"\n                  >\n                    {registerMutation.isPending ? 'Registering...' : 'Register Account'}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Referral Benefits */}\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl font-bold\">Referral Benefits</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n                    <span>Level 1</span>\n                    <span className=\"font-bold text-primary\">12%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n                    <span>Level 2</span>\n                    <span className=\"font-bold text-secondary\">8%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n                    <span>Level 3</span>\n                    <span className=\"font-bold text-accent\">6%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n                    <span>Levels 4-5</span>\n                    <span className=\"font-bold text-green-400\">4-2%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\">\n                    <span>Levels 6-25</span>\n                    <span className=\"font-bold text-yellow-400\">1-0.25%</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Loading state\n  if (userLoading) {\n    return (\n      <div className=\"min-h-screen pt-24 pb-20 flex items-center justify-center\">\n        <Card className=\"glass-card p-8 text-center\">\n          <CardContent>\n            <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading your profile...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Main profile view\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Your Profile\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">Track your earnings, network, and manage your investments</p>\n        </div>\n\n        <div className=\"max-w-6xl mx-auto space-y-8\">\n          {/* Earnings Overview */}\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* My Earnings */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bold\">\n                  <span className=\"bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                    My Earnings\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center p-6 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-xl\">\n                  <div className=\"text-4xl font-bold mb-2\" data-testid=\"text-total-hica-balance\">\n                    {(parseFloat(user?.totalEarned || '0') + parseFloat(user?.referralEarnings || '0')).toLocaleString()} HICA\n                  </div>\n                  <div className=\"text-muted-foreground\">Total HICA Balance</div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-muted/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-primary mb-1\" data-testid=\"text-staking-earnings\">\n                      {parseFloat(user?.totalEarned || '0').toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">From Staking</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-muted/10 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-secondary mb-1\" data-testid=\"text-referral-earnings-amount\">\n                      {parseFloat(user?.referralEarnings || '0').toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">From Referrals</div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={() => claimMutation.mutate()}\n                    disabled={claimMutation.isPending || parseFloat(user?.referralEarnings || '0') <= 0}\n                    className=\"neon-button w-full py-3 rounded-lg\"\n                    data-testid=\"button-claim-referral-income\"\n                  >\n                    {claimMutation.isPending ? 'Claiming...' : 'Claim Referral Income'}\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      const unstakableStake = userStakes?.find((stake: any) => stake.canUnstake && stake.isActive);\n                      if (!unstakableStake) {\n                        toast({\n                          title: 'No Unstakable Stakes',\n                          description: 'You have no stakes that can be unstaked at this time.',\n                          variant: 'destructive',\n                        });\n                        return;\n                      }\n                      unstakeMutation.mutate(unstakableStake.id);\n                    }}\n                    disabled={unstakeMutation.isPending || !userStakes?.some((stake: any) => stake.canUnstake && stake.isActive)}\n                    variant=\"outline\"\n                    className=\"w-full py-3 rounded-lg border-primary/50 hover:border-primary\"\n                    data-testid=\"button-unstake-tokens\"\n                  >\n                    {unstakeMutation.isPending ? 'Unstaking...' : 'Unstake Tokens'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* My Network */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bold\">\n                  <span className=\"bg-gradient-to-r from-secondary to-accent bg-clip-text text-transparent\">\n                    My Network\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center p-4 bg-gradient-to-r from-secondary/10 to-accent/10 rounded-xl\">\n                  <div className=\"text-3xl font-bold mb-2\" data-testid=\"text-total-referrals\">\n                    {user?.totalReferrals || 0}\n                  </div>\n                  <div className=\"text-muted-foreground\">Total People Referred</div>\n                </div>\n\n                {/* Referral Levels */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold mb-3\">Referrals by Level</h4>\n                  {[1, 2, 3, 4, 5].map(level => {\n                    const levelCount = referrals.filter(r => r.level === level).length;\n                    const commissionRate = level === 1 ? 12 : level === 2 ? 8 : level === 3 ? 6 : level === 4 ? 4 : 2;\n                    return (\n                      <div key={level} className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\" data-testid={`referral-level-${level}`}>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center text-sm font-bold\">\n                            L{level}\n                          </div>\n                          <span>Level {level}</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\" data-testid={`level-${level}-count`}>{levelCount} people</div>\n                          <div className=\"text-sm text-muted-foreground\">{commissionRate}% commission</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                  {referrals.some(r => r.level > 5) && (\n                    <div className=\"flex justify-between items-center p-3 bg-muted/10 rounded-lg\" data-testid=\"referral-levels-6-plus\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-8 h-8 bg-gradient-to-r from-accent to-primary rounded-full flex items-center justify-center text-xs font-bold\">\n                          6+\n                        </div>\n                        <span>Levels 6-25</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold\" data-testid=\"levels-6-plus-count\">{referrals.filter(r => r.level > 5).length} people</div>\n                        <div className=\"text-sm text-muted-foreground\">1-0.25% commission</div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Profile Stats */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-xl font-bold\">Account Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-4 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full mx-auto mb-3 flex items-center justify-center\">\n                    <i className=\"fas fa-user text-white text-xl\"></i>\n                  </div>\n                  <div className=\"font-bold mb-1\" data-testid=\"text-user-address\">\n                    {user?.walletAddress?.substring(0, 6)}...{user?.walletAddress?.substring(user.walletAddress.length - 4)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\" data-testid=\"text-join-date\">\n                    Joined {formatDate(user?.createdAt || new Date())}\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-secondary to-accent rounded-full mx-auto mb-3 flex items-center justify-center\">\n                    <i className=\"fas fa-coins text-white text-xl\"></i>\n                  </div>\n                  <div className=\"font-bold mb-1\" data-testid=\"text-total-staked\">\n                    {parseFloat(user?.totalStaked || '0').toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">HICA Staked</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-primary rounded-full mx-auto mb-3 flex items-center justify-center\">\n                    <i className=\"fas fa-chart-line text-white text-xl\"></i>\n                  </div>\n                  <div className=\"font-bold mb-1 text-primary\" data-testid=\"text-total-earned\">\n                    {parseFloat(user?.totalEarned || '0').toLocaleString()}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">HICA Earned</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-full mx-auto mb-3 flex items-center justify-center\">\n                    <i className=\"fas fa-users text-white text-xl\"></i>\n                  </div>\n                  <div className=\"font-bold mb-1 text-secondary\">\n                    {user?.totalReferrals || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Total Referrals</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Referral Network Details */}\n          {referralsLoading ? (\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <p className=\"text-muted-foreground\">Loading referral network...</p>\n              </CardContent>\n            </Card>\n          ) : (\n            <ReferralNetwork\n              referrals={referrals}\n              totalReferrals={user?.totalReferrals || 0}\n              referralEarnings={user?.referralEarnings || '0'}\n              referralLink={generateReferralLink()}\n              onClaim={() => claimMutation.mutate()}\n              isClaiming={claimMutation.isPending}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20299},"client/src/pages/stake.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Slider } from '@/components/ui/slider';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWallet } from '@/hooks/use-wallet';\nimport { useContract } from '@/hooks/use-contract';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nexport default function Stake() {\n  const { toast } = useToast();\n  const { walletAddress, isConnected, connect } = useWallet();\n  const { stake, approveTokens, approveAndStake, isLoading, error } = useContract();\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [lockPeriod, setLockPeriod] = useState([12]); // Slider uses array format\n  const [referrerAddress, setReferrerAddress] = useState('');\n  const [isEditingAmount, setIsEditingAmount] = useState(false);\n\n  // Calculate APY based on lock period\n  const calculateAPY = (months: number) => {\n    if (months >= 36) return 18; // 3 years = 18%\n    if (months >= 24) return 15; // 2 years = 15%\n    if (months >= 12) return 12; // 1 year = 12%\n    return 10; // Less than 1 year = 10%\n  };\n\n  // Calculate estimated rewards\n  const calculateRewards = () => {\n    if (!stakeAmount || isNaN(parseFloat(stakeAmount))) return 0;\n    const amount = parseFloat(stakeAmount);\n    const apy = calculateAPY(lockPeriod[0]);\n    const monthlyReward = (amount * apy) / 100;\n    return monthlyReward * lockPeriod[0];\n  };\n\n  // Real API calls for user data and stats\n  const { data: userBalance } = useQuery({\n    queryKey: ['userBalance', walletAddress],\n    queryFn: async () => {\n      // Calculate balance from user's total staked and earned\n      try {\n        const userResponse = await apiRequest('GET', `/api/users/${walletAddress}`);\n        const userData = await userResponse.json();\n        const totalBalance = parseFloat(userData.totalEarned || '0') + parseFloat(userData.referralEarnings || '0');\n        return { balance: totalBalance, usdValue: totalBalance.toFixed(2) };\n      } catch {\n        return { balance: 0, usdValue: '0.00' };\n      }\n    },\n    enabled: !!walletAddress\n  });\n\n  const { data: userStakes } = useQuery({\n    queryKey: ['userStakes', walletAddress],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/stakes/user/${walletAddress}`);\n      const data = await response.json();\n      // Add hasReferrer property based on existing data\n      return {\n        ...data,\n        hasReferrer: data.referrer && data.referrer !== '0x0000000000000000000000000000000000000000'\n      };\n    },\n    enabled: !!walletAddress\n  });\n\n  // Remove stakingStats query - no longer needed\n\n  const stakeMutation = useMutation({\n    mutationFn: async (data: { amount: string; lockYears: number; referrer: string }) => {\n      // Use the combined approveAndStake function\n      const success = await approveAndStake(data.amount, data.lockYears, data.referrer);\n      \n      if (!success) {\n        throw new Error('Failed to complete staking process');\n      }\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Staking Successful!',\n        description: `Successfully staked ${stakeAmount} HICA for ${Math.ceil(lockPeriod[0]/12)} years.`,\n      });\n      setStakeAmount('');\n      setReferrerAddress('');\n      queryClient.invalidateQueries({ queryKey: ['userStakes', walletAddress] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', walletAddress] });\n      queryClient.invalidateQueries({ queryKey: ['userBalance', walletAddress] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Staking Failed',\n        description: error.message || 'An error occurred while staking',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleStake = () => {\n    if (!isConnected || !walletAddress) {\n      toast({\n        title: 'Wallet Not Connected',\n        description: 'Please connect your wallet to proceed.',\n        variant: 'destructive',\n      });\n      connect();\n      return;\n    }\n    \n    // Validate stake amount (must be a positive number)\n    if (!stakeAmount || isNaN(Number(stakeAmount)) || Number(stakeAmount) <= 0) {\n      toast({\n        title: 'Invalid Amount',\n        description: 'Please enter a valid stake amount (must be a positive number).',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    // Convert months to years for the contract (rounding up)\n    const lockYears = Math.ceil(lockPeriod[0] / 12);\n    \n    // Validate lock period (must be at least 1 month)\n    if (lockPeriod[0] < 1) {\n      toast({\n        title: 'Invalid Lock Period',\n        description: 'Lock period must be at least 1 month.',\n        variant: 'destructive',\n      });\n      return;\n    }\n    \n    // Validate referrer address if provided\n    let referrer = '0x0000000000000000000000000000000000000000';\n    if (referrerAddress) {\n      try {\n        // Check if it's a valid Ethereum address\n        if (!/^0x[a-fA-F0-9]{40}$/.test(referrerAddress)) {\n          toast({\n            title: 'Invalid Referrer Address',\n            description: 'Please enter a valid Ethereum address or leave it empty.',\n            variant: 'destructive',\n          });\n          return;\n        }\n        referrer = referrerAddress;\n      } catch (error) {\n        toast({\n          title: 'Invalid Referrer Address',\n          description: 'Please enter a valid Ethereum address or leave it empty.',\n          variant: 'destructive',\n        });\n        return;\n      }\n    }\n    \n    // All validations passed, proceed with staking\n    stakeMutation.mutate({\n      amount: stakeAmount.trim(),\n      lockYears: lockYears,\n      referrer: referrer\n    });\n  };\n\n  // Unstake mutation\n  const unstakeMutation = useMutation({\n    mutationFn: async (stakeId: string) => {\n      const response = await apiRequest('POST', `/api/stakes/${stakeId}/unstake`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Unstaking Successful!',\n        description: 'Your tokens have been unstaked and rewards claimed.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['userStakes', walletAddress] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users', walletAddress] });\n      queryClient.invalidateQueries({ queryKey: ['userBalance', walletAddress] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Unstaking Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // handleUnstake function removed - now handled per-item in unstake tab\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"container mx-auto px-6 max-w-4xl\">\n        {/* Main Staking Interface */}\n        <Card className=\"glass-card mb-8\">\n          <CardContent className=\"p-8\">\n            {/* Tabs */}\n            <Tabs defaultValue=\"stake\" className=\"w-full\">\n              <TabsList className=\"grid grid-cols-2 mb-8 bg-muted/20\">\n                <TabsTrigger value=\"stake\" className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\" data-testid=\"tab-stake\">\n                  <span className=\"text-lg\">Stake</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"unstake\" className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground\" data-testid=\"tab-unstake\">\n                  <span className=\"text-lg\">Unstake</span>\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"stake\" className=\"space-y-6\">\n                {/* Balance Display */}\n                <div className=\"text-center mb-8 cursor-pointer\" onClick={() => setIsEditingAmount(true)}>\n                  <div className=\"text-sm text-muted-foreground mb-2\">Available Balance</div>\n                  <div className=\"text-6xl font-bold text-primary mb-2\" data-testid=\"balance-amount\">\n                    {userBalance?.balance?.toLocaleString() || 0}\n                  </div>\n                  <div className=\"text-xl text-muted-foreground\">\n                    $ {userBalance?.usdValue || '0.00'}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground mt-2\">HICA</div>\n                </div>\n\n                {/* Stake Amount Display/Input */}\n                <div className=\"text-center mb-8 p-6 bg-primary/10 rounded-xl border border-primary/30\">\n                  <div className=\"text-sm font-medium mb-2\">Amount to Stake</div>\n                  {isEditingAmount ? (\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <input\n                        type=\"number\"\n                        placeholder=\"Enter amount\"\n                        value={stakeAmount}\n                        onChange={(e) => setStakeAmount(e.target.value)}\n                        onBlur={() => setIsEditingAmount(false)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            setIsEditingAmount(false);\n                          }\n                        }}\n                        className=\"text-4xl font-bold text-center bg-transparent border-none outline-none text-primary w-64\"\n                        data-testid=\"input-stake-amount\"\n                        autoFocus\n                      />\n                      <span className=\"text-2xl text-muted-foreground\">HICA</span>\n                    </div>\n                  ) : (\n                    <div \n                      className=\"text-4xl font-bold text-primary cursor-pointer hover:text-primary/80 transition-colors\"\n                      onClick={() => setIsEditingAmount(true)}\n                      data-testid=\"display-stake-amount\"\n                    >\n                      {stakeAmount || '0'} <span className=\"text-2xl text-muted-foreground\">HICA</span>\n                    </div>\n                  )}\n                  <div className=\"text-sm text-muted-foreground mt-2\">Click to edit amount</div>\n                </div>\n\n                {/* Lock Period Slider */}\n                <div className=\"space-y-6 mb-8 p-6 bg-muted/10 rounded-xl\">\n                  <div className=\"text-center\">\n                    <Label className=\"text-lg font-semibold block mb-2\">\n                      Lock Period: {lockPeriod[0]} months\n                    </Label>\n                    <div className=\"text-2xl font-bold text-secondary mb-4\">\n                      {Math.floor(lockPeriod[0] / 12)} Year{Math.floor(lockPeriod[0] / 12) !== 1 ? 's' : ''}\n                    </div>\n                  </div>\n                  \n                  <div className=\"px-4\">\n                    <Slider\n                      value={lockPeriod}\n                      onValueChange={setLockPeriod}\n                      min={12}\n                      max={36}\n                      step={1}\n                      className=\"w-full slider-smooth\"\n                      data-testid=\"slider-lock-period\"\n                    />\n                    <div className=\"flex justify-between text-sm text-muted-foreground mt-4\">\n                      <div className=\"text-center\">\n                        <div className=\"font-semibold\">1 Year</div>\n                        <div className=\"text-xs\">12 months</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-semibold\">2 Years</div>\n                        <div className=\"text-xs\">24 months</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"font-semibold\">3 Years</div>\n                        <div className=\"text-xs\">36 months</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Reward Calculation */}\n                <div className=\"text-center mb-8 p-4 bg-primary/10 rounded-lg border border-primary/30\">\n                  <div className=\"text-sm font-medium mb-2\">Estimated Rewards</div>\n                  <div className=\"text-2xl font-bold text-primary\" data-testid=\"estimated-rewards\">\n                    {calculateRewards().toLocaleString()} HICA\n                  </div>\n                  <div className=\"text-sm font-medium mt-1\">\n                    APY: <span className=\"text-primary font-bold\">{calculateAPY(lockPeriod[0])}%</span> monthly\n                  </div>\n                </div>\n\n                {/* Connect/Stake Button with Conditional Referral */}\n                <div className=\"mb-8\">\n                  {!isConnected ? (\n                    <div className=\"flex justify-center\">\n                      <Button\n                        onClick={connect}\n                        className=\"neon-button px-32 py-4 rounded-xl text-lg font-bold\"\n                        data-testid=\"button-connect-wallet\"\n                      >\n                        Connect\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {/* Conditional Referral Input - Only show if user doesn't have a referrer */}\n                      {!userStakes?.hasReferrer && (\n                        <div className=\"p-4 bg-primary/10 rounded-lg border border-primary/30 mb-4\">\n                          <Label htmlFor=\"referrer\" className=\"text-sm font-medium mb-2 block\">Add Referrer (Optional)</Label>\n                          <div className=\"flex gap-2\">\n                            <input\n                              id=\"referrer\"\n                              placeholder=\"Enter referrer address\"\n                              value={referrerAddress}\n                              onChange={(e) => setReferrerAddress(e.target.value)}\n                              className=\"flex-1 h-10 px-3 py-2 bg-muted/20 rounded-xl border border-border focus:border-primary transition-colors outline-none\"\n                            />\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Stake Button */}\n                      <Button\n                        onClick={handleStake}\n                        disabled={stakeMutation.isPending || !stakeAmount || parseFloat(stakeAmount) <= 0}\n                        className=\"neon-button w-full py-4 rounded-xl text-lg font-bold\"\n                        data-testid=\"button-stake-tokens\"\n                      >\n                        {stakeMutation.isPending ? 'Staking...' : 'Stake HICA'}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"unstake\" className=\"space-y-6\">\n                {!isConnected ? (\n                  <div className=\"text-center py-8\">\n                    <Button\n                      onClick={connect}\n                      className=\"neon-button px-32 py-4 rounded-xl text-lg font-bold\"\n                      data-testid=\"button-connect-wallet-unstake\"\n                    >\n                      Connect Wallet\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-6\">\n                    {/* Active Stakes List */}\n                    {userStakes && userStakes.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-xl font-bold text-center mb-6\">Your Active Stakes</h3>\n                        {userStakes.map((stake: any) => (\n                          <div key={stake.id} className=\"p-4 bg-muted/10 rounded-lg border border-border\" data-testid={`stake-item-${stake.id}`}>\n                            <div className=\"flex justify-between items-center mb-2\">\n                              <span className=\"font-semibold\">{parseFloat(stake.amount).toLocaleString()} HICA</span>\n                              <span className={`px-2 py-1 rounded text-xs ${stake.isActive ? 'bg-green-500/20 text-green-400' : 'bg-gray-500/20 text-gray-400'}`}>\n                                {stake.isActive ? 'Active' : 'Completed'}\n                              </span>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground mb-3\">\n                              Lock Period: {stake.lockPeriodMonths} months • APY: {stake.apy || calculateAPY(stake.lockPeriodMonths)}%\n                            </div>\n                            {stake.canUnstake && stake.isActive && (\n                              <Button\n                                onClick={() => unstakeMutation.mutate(stake.id)}\n                                disabled={unstakeMutation.isPending}\n                                variant=\"outline\"\n                                className=\"w-full py-2 border-primary/50 hover:border-primary\"\n                                data-testid={`button-unstake-${stake.id}`}\n                              >\n                                {unstakeMutation.isPending ? 'Unstaking...' : 'Unstake'}\n                              </Button>\n                            )}\n                            {!stake.canUnstake && stake.isActive && (\n                              <div className=\"text-center text-sm text-muted-foreground\">\n                                Cannot unstake yet - lock period not completed\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <div className=\"text-muted-foreground mb-4\">No active stakes found</div>\n                        <div className=\"text-sm text-muted-foreground\">Start staking to see your stakes here</div>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18357},"client/src/pages/swap.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWallet } from '@/hooks/use-wallet';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nexport default function Swap() {\n  const [fromAmount, setFromAmount] = useState('');\n  const [toAmount, setToAmount] = useState('');\n  const [swapDirection, setSwapDirection] = useState<'buy' | 'sell'>('buy');\n  const [needsApproval, setNeedsApproval] = useState(false);\n  const { toast } = useToast();\n  const { walletAddress, isConnected } = useWallet();\n\n  const swapMutation = useMutation({\n    mutationFn: async (data: { type: 'buy' | 'sell'; amount: string; userId: string }) => {\n      const response = await apiRequest('POST', `/api/swaps/${data.type}`, {\n        userId: data.userId,\n        amount: data.amount,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Swap Successful!',\n        description: `Successfully ${swapDirection === 'buy' ? 'bought' : 'sold'} ${fromAmount} tokens.`,\n      });\n      setFromAmount('');\n      setToAmount('');\n    },\n    onError: (error) => {\n      toast({\n        title: 'Swap Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async () => {\n      // Mock approval - in real app this would interact with smart contract\n      return new Promise(resolve => setTimeout(resolve, 2000));\n    },\n    onSuccess: () => {\n      setNeedsApproval(false);\n      toast({\n        title: 'Approval Successful!',\n        description: 'HICA tokens have been approved for trading.',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Approval Failed',\n        description: 'Failed to approve HICA tokens.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleAmountChange = (value: string, isFrom: boolean) => {\n    if (isFrom) {\n      setFromAmount(value);\n      setToAmount(value); // 1:1 ratio\n    } else {\n      setToAmount(value);\n      setFromAmount(value); // 1:1 ratio\n    }\n  };\n\n  const handleSwapDirection = () => {\n    setSwapDirection(prev => prev === 'buy' ? 'sell' : 'buy');\n    setFromAmount(toAmount);\n    setToAmount(fromAmount);\n  };\n\n  const handleSwap = () => {\n    if (!isConnected || !walletAddress) {\n      toast({\n        title: 'Wallet Not Connected',\n        description: 'Please connect your wallet to proceed.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (!fromAmount || parseFloat(fromAmount) <= 0) {\n      toast({\n        title: 'Invalid Amount',\n        description: 'Please enter a valid amount.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (swapDirection === 'sell' && needsApproval) {\n      toast({\n        title: 'Approval Required',\n        description: 'Please approve HICA tokens first.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    swapMutation.mutate({\n      type: swapDirection,\n      amount: fromAmount,\n      userId: walletAddress, // Using wallet address as user ID\n    });\n  };\n\n  const fromToken = swapDirection === 'buy' ? 'USDT' : 'HICA';\n  const toToken = swapDirection === 'buy' ? 'HICA' : 'USDT';\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            <span className=\"bg-gradient-to-r from-accent to-primary bg-clip-text text-transparent\">\n              Token Swap\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">Exchange USDT for HICA at 1:1 ratio</p>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-bold text-center\">Token Exchange</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* From Token */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-muted-foreground\">From</Label>\n                <div className=\"flex items-center space-x-4 p-4 bg-muted/20 rounded-xl border border-border focus-within:border-primary transition-colors\">\n                  <div className=\"flex items-center space-x-2 flex-1\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      fromToken === 'USDT' \n                        ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' \n                        : 'bg-gradient-to-r from-primary to-secondary'\n                    }`}>\n                      {fromToken === 'USDT' ? '$' : 'H'}\n                    </div>\n                    <span className=\"font-semibold\" data-testid=\"text-from-token\">{fromToken}</span>\n                  </div>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    value={fromAmount}\n                    onChange={(e) => handleAmountChange(e.target.value, true)}\n                    className=\"bg-transparent border-none text-2xl font-bold text-right outline-none focus:ring-0 flex-2\"\n                    data-testid=\"input-from-amount\"\n                  />\n                </div>\n              </div>\n\n              {/* Swap Button */}\n              <div className=\"flex justify-center\">\n                <Button\n                  onClick={handleSwapDirection}\n                  className=\"neon-button p-3 rounded-full\"\n                  data-testid=\"button-swap-direction\"\n                >\n                  <i className=\"fas fa-exchange-alt text-xl\"></i>\n                </Button>\n              </div>\n\n              {/* To Token */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-sm font-medium text-muted-foreground\">To</Label>\n                <div className=\"flex items-center space-x-4 p-4 bg-muted/20 rounded-xl border border-border\">\n                  <div className=\"flex items-center space-x-2 flex-1\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                      toToken === 'HICA' \n                        ? 'bg-gradient-to-r from-primary to-secondary' \n                        : 'bg-gradient-to-r from-yellow-400 to-yellow-600'\n                    }`}>\n                      {toToken === 'HICA' ? 'H' : '$'}\n                    </div>\n                    <span className=\"font-semibold\" data-testid=\"text-to-token\">{toToken}</span>\n                  </div>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    value={toAmount}\n                    onChange={(e) => handleAmountChange(e.target.value, false)}\n                    className=\"bg-transparent border-none text-2xl font-bold text-right outline-none focus:ring-0 flex-2\"\n                    data-testid=\"input-to-amount\"\n                  />\n                </div>\n              </div>\n\n              {/* Rate Info */}\n              <div className=\"flex justify-between items-center p-4 bg-muted/10 rounded-xl\">\n                <span className=\"text-muted-foreground\">Exchange Rate</span>\n                <span className=\"font-semibold\" data-testid=\"text-exchange-rate\">1 USDT = 1 HICA</span>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button\n                  onClick={handleSwap}\n                  disabled={swapMutation.isPending}\n                  className=\"neon-button py-4 rounded-xl font-bold\"\n                  data-testid=\"button-buy-hica\"\n                >\n                  {swapMutation.isPending ? 'Processing...' : `${swapDirection === 'buy' ? 'Buy' : 'Sell'} ${toToken}`}\n                </Button>\n                <Button\n                  onClick={handleSwap}\n                  disabled={swapMutation.isPending}\n                  variant=\"outline\"\n                  className=\"glass-card py-4 rounded-xl font-bold border-border hover:border-primary transition-colors\"\n                  data-testid=\"button-sell-hica\"\n                >\n                  {swapMutation.isPending ? 'Processing...' : `${swapDirection === 'sell' ? 'Buy' : 'Sell'} ${fromToken}`}\n                </Button>\n              </div>\n\n              {/* Approval Notice */}\n              {swapDirection === 'sell' && needsApproval && (\n                <div className=\"bg-yellow-500/10 border border-yellow-500/20 rounded-xl p-4\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <i className=\"fas fa-info-circle text-yellow-500\"></i>\n                    <span className=\"text-sm\">First-time users need to approve HICA token</span>\n                  </div>\n                  <Button\n                    onClick={() => approveMutation.mutate()}\n                    disabled={approveMutation.isPending}\n                    className=\"bg-yellow-500 text-black hover:bg-yellow-600 px-4 py-2 rounded-lg text-sm font-semibold\"\n                    data-testid=\"button-approve-hica\"\n                  >\n                    {approveMutation.isPending ? 'Approving...' : 'Approve HICA'}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9705},"client/src/pages/unstake.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWallet } from '@/hooks/use-wallet';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Stake, ContractSettings } from '@shared/schema';\n\nexport default function Unstake() {\n  const { toast } = useToast();\n  const { walletAddress, isConnected } = useWallet();\n\n  const { data: stakes = [], isLoading } = useQuery<Stake[]>({\n    queryKey: ['/api/stakes/user', walletAddress],\n    enabled: !!walletAddress,\n  });\n\n  const { data: contractSettings } = useQuery<ContractSettings>({\n    queryKey: ['/api/contract/settings'],\n  });\n\n  const unstakeMutation = useMutation({\n    mutationFn: async (stakeId: string) => {\n      const response = await apiRequest('POST', `/api/stakes/${stakeId}/unstake`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Unstake Successful!',\n        description: 'Your tokens have been unstaked and rewards transferred.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/stakes'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Unstake Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const emergencyUnstakeMutation = useMutation({\n    mutationFn: async (stakeId: string) => {\n      const response = await apiRequest('POST', `/api/stakes/${stakeId}/emergency-unstake`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Emergency Unstake Complete',\n        description: 'Your principal has been returned (no rewards).',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/stakes'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Emergency Unstake Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const formatTimeLeft = (endDate: string) => {\n    const end = new Date(endDate);\n    const now = new Date();\n    const diffTime = end.getTime() - now.getTime();\n    \n    if (diffTime <= 0) return 'Ready to unstake';\n    \n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    const diffMonths = Math.floor(diffDays / 30);\n    const remainingDays = diffDays % 30;\n    \n    if (diffMonths > 0) {\n      return `${diffMonths}m ${remainingDays}d left`;\n    }\n    return `${diffDays}d left`;\n  };\n\n  const formatLockPeriod = (months: number) => {\n    if (months === 12) return '1 Year';\n    if (months === 24) return '2 Years';\n    if (months === 36) return '3 Years';\n    return `${months} months`;\n  };\n\n  if (!isConnected) {\n    return (\n      <div className=\"min-h-screen pt-24 pb-20 flex items-center justify-center\">\n        <Card className=\"glass-card p-8 text-center max-w-md\">\n          <CardContent>\n            <i className=\"fas fa-wallet text-6xl text-muted-foreground mb-4\"></i>\n            <h2 className=\"text-2xl font-bold mb-4\">Wallet Not Connected</h2>\n            <p className=\"text-muted-foreground\">\n              Please connect your wallet to view and manage your stakes.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pt-24 pb-20\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold mb-4\">\n            <span className=\"bg-gradient-to-r from-accent to-destructive bg-clip-text text-transparent\">\n              Manage Stakes\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">View and manage your active stakes</p>\n        </div>\n\n        <div className=\"max-w-6xl mx-auto space-y-8\">\n          {/* Active Stakes */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl font-bold\">Your Active Stakes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading your stakes...</p>\n                </div>\n              ) : stakes.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <i className=\"fas fa-coins text-6xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-xl font-bold mb-2\">No Active Stakes</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    You don't have any active stakes yet. Start staking to earn rewards!\n                  </p>\n                  <Button className=\"neon-button\" data-testid=\"button-start-staking\">\n                    Start Staking\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {stakes.map((stake) => (\n                    <div\n                      key={stake.id}\n                      className={`p-6 bg-muted/10 rounded-xl border ${\n                        stake.canUnstake ? 'border-green-500/30' : 'border-border'\n                      }`}\n                    >\n                      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 items-center\">\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Amount</div>\n                          <div className=\"font-bold text-lg\" data-testid={`text-stake-amount-${stake.id}`}>\n                            {parseInt(stake.amount).toLocaleString()} HICA\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Lock Period</div>\n                          <div className=\"font-semibold\" data-testid={`text-stake-period-${stake.id}`}>\n                            {formatLockPeriod(stake.lockPeriodMonths)}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Status</div>\n                          <div className=\"font-semibold\" data-testid={`text-stake-status-${stake.id}`}>\n                            {stake.canUnstake ? (\n                              <Badge variant=\"default\" className=\"bg-green-500 hover:bg-green-600\">\n                                Ready to Unstake\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"secondary\" className=\"bg-yellow-500/20 text-yellow-400\">\n                                {formatTimeLeft(stake.endDate.toString())}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {stake.canUnstake ? 'Total Earned' : 'Current Earned'}\n                          </div>\n                          <div className=\"font-bold text-primary\" data-testid={`text-stake-earned-${stake.id}`}>\n                            {parseInt(stake.earnedAmount || '0').toLocaleString()} HICA\n                          </div>\n                        </div>\n                        <div>\n                          {stake.canUnstake ? (\n                            <Button\n                              onClick={() => unstakeMutation.mutate(stake.id)}\n                              disabled={unstakeMutation.isPending}\n                              className=\"neon-button px-4 py-2 rounded-lg w-full\"\n                              data-testid={`button-unstake-${stake.id}`}\n                            >\n                              {unstakeMutation.isPending ? 'Unstaking...' : 'Unstake'}\n                            </Button>\n                          ) : (\n                            <Button\n                              disabled\n                              variant=\"outline\"\n                              className=\"cursor-not-allowed w-full\"\n                              data-testid={`button-locked-${stake.id}`}\n                            >\n                              Locked\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Emergency Unstake */}\n          <Card className=\"glass-card border border-destructive/30\">\n            <CardHeader>\n              <div className=\"flex items-center space-x-3\">\n                <i className=\"fas fa-exclamation-triangle text-destructive text-2xl\"></i>\n                <CardTitle className=\"text-2xl font-bold text-destructive\">Emergency Unstake</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-6\">\n                Emergency unstake is only available when the contract is paused. \n                You will only receive your principal amount without rewards.\n              </p>\n              \n              <div className=\"space-y-4\">\n                {stakes.filter(stake => stake.isActive).map((stake) => (\n                  <div key={stake.id} className=\"flex items-center justify-between p-4 bg-muted/10 rounded-lg\">\n                    <div>\n                      <div className=\"font-semibold\">\n                        {parseInt(stake.amount).toLocaleString()} HICA\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {formatLockPeriod(stake.lockPeriodMonths)} stake\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => emergencyUnstakeMutation.mutate(stake.id)}\n                      disabled={\n                        emergencyUnstakeMutation.isPending || \n                        !contractSettings?.isPaused || \n                        !contractSettings?.emergencyUnstakeEnabled\n                      }\n                      variant=\"destructive\"\n                      className=\"px-4 py-2 rounded-lg\"\n                      data-testid={`button-emergency-unstake-${stake.id}`}\n                    >\n                      {emergencyUnstakeMutation.isPending ? 'Processing...' : 'Emergency Withdraw'}\n                    </Button>\n                  </div>\n                ))}\n                \n                {stakes.filter(stake => stake.isActive).length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No active stakes available for emergency withdrawal\n                  </div>\n                )}\n              </div>\n              \n              {(!contractSettings?.isPaused || !contractSettings?.emergencyUnstakeEnabled) && (\n                <div className=\"mt-4 p-3 bg-muted/10 rounded-lg text-sm text-muted-foreground\">\n                  <i className=\"fas fa-info-circle mr-2\"></i>\n                  Contract is not paused - emergency unstake unavailable\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11591},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"slider-track relative h-3 w-full grow overflow-hidden rounded-full bg-muted/30\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-gradient-to-r from-primary to-secondary rounded-full\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"slider-thumb block h-6 w-6 rounded-full border-3 border-primary bg-background ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:scale-110 cursor-pointer\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1178},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298},"client/src/lib/branding.ts":{"content":"// Centralized branding configuration for Zeritheum\nimport logoPath from '@assets/WhatsApp Image 2025-09-24 at 20.34.41_2f4382c2_1758811844549.jpg';\n\nexport const BRANDING = {\n  APP_NAME: 'Zeritheum',\n  APP_TAGLINE: 'The Future of Digital Currency',\n  COIN_TICKER: 'ZE',\n  STAKED_DERIVATIVE: 'osZE',\n  CURRENCY_SYMBOL: 'ZE',\n  LOGO_PATH: logoPath,\n  // Pricing placeholder (can be dynamic)\n  DEFAULT_PRICE_USD: 3977.64,\n} as const;\n\nexport const APP_NAME = BRANDING.APP_NAME;\nexport const COIN_TICKER = BRANDING.COIN_TICKER;\nexport const STAKED_DERIVATIVE = BRANDING.STAKED_DERIVATIVE;\nexport const CURRENCY_SYMBOL = BRANDING.CURRENCY_SYMBOL;\nexport const LOGO_PATH = BRANDING.LOGO_PATH;","size_bytes":687}},"version":1}